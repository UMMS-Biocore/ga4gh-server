"""
DO NOT EDIT THIS FILE!!
This file is automatically generated by the process_schemas.py program
in the scripts directory. It is not intended to be edited directly. If
you need to update the GA4GH protocol classes, please run the script
on the appropriate schema version.
"""
from protocol import ProtocolElement
from protocol import SearchRequest
from protocol import SearchResponse

import avro.schema

version = '0.6.e6d6074'


class AlleleResource(ProtocolElement):
    """
Frequencies of alleles
    """
    _schemaSource = """
{"namespace": "org.ga4gh.beacon", "type": "record", "name":
"AlleleResource", "fields": [{"doc": "", "type": "string", "name":
"allele"}, {"doc": "", "type": "double", "name": "frequency"}], "doc":
""}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = set([
        "allele",
        "frequency",
    ])

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return embeddedTypes[fieldName]

    __slots__ = ['allele', 'frequency']

    def __init__(self):
        self.allele = None
        self.frequency = None


class Analysis(ProtocolElement):
    """
An analysis contains an interpretation of one or several experiments.
(e.g. SNVs, copy number variations, methylation status) together with
information about the methodology used.
    """
    _schemaSource = """
{"namespace": "org.ga4gh.models", "type": "record", "name":
"Analysis", "fields": [{"doc": "", "type": "string", "name": "id"},
{"default": null, "doc": "", "type": ["null", "string"], "name":
"name"}, {"default": null, "doc": "", "type": ["null", "string"],
"name": "description"}, {"default": null, "doc": "", "type": ["null",
"long"], "name": "created"}, {"default": null, "doc": "", "type":
["null", "long"], "name": "updated"}, {"default": null, "doc": "",
"type": ["null", "string"], "name": "type"}, {"default": null, "doc":
"", "type": {"items": "string", "type": "array"}, "name": "software"},
{"default": {}, "doc": "", "type": {"values": {"items": "string",
"type": "array"}, "type": "map"}, "name": "info"}], "doc": ""}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = set(["id"])

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return embeddedTypes[fieldName]

    __slots__ = ['created', 'description', 'id', 'info', 'name', 'software',
                 'type', 'updated']

    def __init__(self):
        self.created = None
        self.description = None
        self.id = None
        self.info = {}
        self.name = None
        self.software = None
        self.type = None
        self.updated = None


class BeaconInformationResource(ProtocolElement):
    """
BeaconInformationResource
    """
    _schemaSource = """
{"namespace": "org.ga4gh.beacon", "type": "record", "name":
"BeaconInformationResource", "fields": [{"doc": "", "type": "string",
"name": "id"}, {"doc": "", "type": "string", "name": "organization"},
{"doc": "", "type": "string", "name": "description"}, {"default": [],
"doc": "", "type": {"items": {"doc": "", "type": "record", "name":
"DataSetResource", "fields": [{"doc": "", "type": "string", "name":
"id"}, {"doc": "", "type": "string", "name": "reference"}, {"default":
null, "doc": "", "type": ["null", "string"], "name": "description"},
{"default": null, "doc": "", "type": ["null", {"doc": "", "type":
"record", "name": "DataSizeResource", "fields": [{"doc": "", "type":
"int", "name": "variants"}, {"doc": "", "type": "int", "name":
"samples"}]}], "name": "size"}, {"doc": "", "type": "boolean", "name":
"multiple"}, {"default": [], "doc": "", "type": {"items": "string",
"type": "array"}, "name": "datasets"}, {"default": [], "doc": "",
"type": {"items": {"doc": "", "type": "record", "name":
"DataUseResource", "fields": [{"doc": "", "type": "string", "name":
"category"}, {"default": null, "doc": "", "type": ["null", "string"],
"name": "description"}, {"default": [], "doc": "", "type": {"items":
{"doc": "", "type": "record", "name": "DataUseRequirementResource",
"fields": [{"doc": "", "type": "string", "name": "name"}, {"default":
null, "doc": "", "type": ["null", "string"], "name": "description"}]},
"type": "array"}, "name": "requirements"}]}, "type": "array"}, "name":
"data_use"}]}, "type": "array"}, "name": "datasets"}, {"doc": "",
"type": "string", "name": "api"}, {"default": null, "doc": "", "type":
["null", "string"], "name": "homepage"}, {"default": null, "doc": "",
"type": ["null", "string"], "name": "email"}, {"default": null, "doc":
"", "type": ["null", "string"], "name": "auth"}, {"default": null,
"doc": "", "type": ["null", "string"], "name": "queries"}], "doc": ""}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = set([
        "api",
        "description",
        "id",
        "organization",
    ])

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'datasets': DataSetResource,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'datasets': DataSetResource,
        }
        return embeddedTypes[fieldName]

    __slots__ = ['api', 'auth', 'datasets', 'description', 'email', 'homepage',
                 'id', 'organization', 'queries']

    def __init__(self):
        self.api = None
        self.auth = None
        self.datasets = []
        self.description = None
        self.email = None
        self.homepage = None
        self.id = None
        self.organization = None
        self.queries = None


class BeaconResponseResource(ProtocolElement):
    """
The response from the Beacon
    """
    _schemaSource = """
{"namespace": "org.ga4gh.beacon", "type": "record", "name":
"BeaconResponseResource", "fields": [{"doc": "", "type": "string",
"name": "beacon"}, {"doc": "", "type": {"doc": "", "type": "record",
"name": "QueryResource", "fields": [{"doc": "", "type": "string",
"name": "allele"}, {"doc": "", "type": "string", "name":
"chromosome"}, {"doc": "", "type": "long", "name": "position"},
{"doc": "", "type": "string", "name": "reference"}, {"default": null,
"doc": "", "type": ["null", "string"], "name": "dataset"}]}, "name":
"query"}, {"doc": "", "type": {"doc": "", "type": "record", "name":
"ResponseResource", "fields": [{"doc": "", "type": "string", "name":
"exists"}, {"default": [], "doc": "", "type": {"items": {"doc": "",
"type": "record", "name": "AlleleResource", "fields": [{"doc": "",
"type": "string", "name": "allele"}, {"doc": "", "type": "double",
"name": "frequency"}]}, "type": "array"}, "name": "frequencies"},
{"default": null, "doc": "", "type": ["null", "int"], "name":
"observed"}, {"default": null, "doc": "", "type": ["null", "string"],
"name": "info"}, {"default": null, "doc": "", "type": ["null", {"doc":
"", "type": "record", "name": "ErrorResource", "fields": [{"doc": "",
"type": "string", "name": "name"}, {"default": null, "doc": "",
"type": ["null", "string"], "name": "description"}]}], "name":
"err"}]}, "name": "response"}], "doc": ""}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = set([
        "beacon",
        "query",
        "response",
    ])

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'query': QueryResource,
            'response': ResponseResource,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'query': QueryResource,
            'response': ResponseResource,
        }
        return embeddedTypes[fieldName]

    __slots__ = ['beacon', 'query', 'response']

    def __init__(self):
        self.beacon = None
        self.query = None
        self.response = None


class Call(ProtocolElement):
    """
A `Call` represents the determination of genotype with respect to a
particular variant. It may include associated information such as quality
and phasing. For example, a call might assign a probability of 0.32 to
the occurrence of a SNP named rs1234 in a call set with the name NA12345.
    """
    _schemaSource = """
{"namespace": "org.ga4gh.models", "type": "record", "name": "Call",
"fields": [{"doc": "", "type": ["null", "string"], "name":
"callSetId"}, {"default": null, "doc": "", "type": ["null", "string"],
"name": "callSetName"}, {"default": [], "doc": "", "type": {"items":
"int", "type": "array"}, "name": "genotype"}, {"default": null, "doc":
"", "type": ["null", "string"], "name": "phaseset"}, {"default": [],
"doc": "", "type": {"items": "double", "type": "array"}, "name":
"genotypeLikelihood"}, {"default": {}, "doc": "", "type": {"values":
{"items": "string", "type": "array"}, "type": "map"}, "name":
"info"}], "doc": ""}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = set(["callSetId"])

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return embeddedTypes[fieldName]

    __slots__ = ['callSetId', 'callSetName', 'genotype', 'genotypeLikelihood',
                 'info', 'phaseset']

    def __init__(self):
        self.callSetId = None
        self.callSetName = None
        self.genotype = []
        self.genotypeLikelihood = []
        self.info = {}
        self.phaseset = None


class CallSet(ProtocolElement):
    """
A `CallSet` is a collection of variant calls for a particular sample.
It belongs to a `VariantSet`. This is equivalent to one column in VCF.
    """
    _schemaSource = """
{"namespace": "org.ga4gh.models", "type": "record", "name": "CallSet",
"fields": [{"doc": "", "type": "string", "name": "id"}, {"default":
null, "doc": "", "type": ["null", "string"], "name": "name"}, {"doc":
"", "type": ["null", "string"], "name": "sampleId"}, {"default": [],
"doc": "", "type": {"items": "string", "type": "array"}, "name":
"variantSetIds"}, {"default": null, "doc": "", "type": ["null",
"long"], "name": "created"}, {"default": null, "doc": "", "type":
["null", "long"], "name": "updated"}, {"default": {}, "doc": "",
"type": {"values": {"items": "string", "type": "array"}, "type":
"map"}, "name": "info"}], "doc": ""}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = set([
        "id",
        "sampleId",
    ])

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return embeddedTypes[fieldName]

    __slots__ = ['created', 'id', 'info', 'name', 'sampleId', 'updated',
                 'variantSetIds']

    def __init__(self):
        self.created = None
        self.id = None
        self.info = {}
        self.name = None
        self.sampleId = None
        self.updated = None
        self.variantSetIds = []


class Characterization(ProtocolElement):
    """
Read characterization data.
    """
    _schemaSource = """
{"namespace": "org.ga4gh", "type": "record", "name":
"Characterization", "fields": [{"doc": "", "type": "string", "name":
"analysisId"}, {"doc": "", "type": "float", "name": "complexity"},
{"doc": "", "type": "float", "name": "fractionMapped"}, {"doc": "",
"type": "float", "name": "intronicFraction"}, {"doc": "", "type":
"float", "name": "exonicFraction"}, {"doc": "", "type": "float",
"name": "intergenicFraction"}], "doc": ""}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = set([
        "analysisId",
        "complexity",
        "exonicFraction",
        "fractionMapped",
        "intergenicFraction",
        "intronicFraction",
    ])

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return embeddedTypes[fieldName]

    __slots__ = ['analysisId', 'complexity', 'exonicFraction', 'fractionMapped',
                 'intergenicFraction', 'intronicFraction']

    def __init__(self):
        self.analysisId = None
        self.complexity = None
        self.exonicFraction = None
        self.fractionMapped = None
        self.intergenicFraction = None
        self.intronicFraction = None


class CigarOperation(object):
    """
An enum for the different types of CIGAR alignment operations that exist.
Used wherever CIGAR alignments are used. The different enumerated values
have the following usage:

* `ALIGNMENT_MATCH`: An alignment match indicates that a sequence can be
  aligned to the reference without evidence of an INDEL. Unlike the
  `SEQUENCE_MATCH` and `SEQUENCE_MISMATCH` operators, the `ALIGNMENT_MATCH`
  operator does not indicate whether the reference and read sequences are an
  exact match. This operator is equivalent to SAM's `M`.
* `INSERT`: The insert operator indicates that the read contains evidence of
  bases being inserted into the reference. This operator is equivalent to
  SAM's `I`.
* `DELETE`: The delete operator indicates that the read contains evidence of
  bases being deleted from the reference. This operator is equivalent to
  SAM's `D`.
* `SKIP`: The skip operator indicates that this read skips a long segment of
  the reference, but the bases have not been deleted. This operator is
  commonly used when working with RNA-seq data, where reads may skip long
  segments of the reference between exons. This operator is equivalent to
  SAM's 'N'.
* `CLIP_SOFT`: The soft clip operator indicates that bases at the start/end
  of a read have not been considered during alignment. This may occur if the
  majority of a read maps, except for low quality bases at the start/end of
  a read. This operator is equivalent to SAM's 'S'. Bases that are soft clipped
  will still be stored in the read.
* `CLIP_HARD`: The hard clip operator indicates that bases at the start/end of
  a read have been omitted from this alignment. This may occur if this linear
  alignment is part of a chimeric alignment, or if the read has been trimmed
  (e.g., during error correction, or to trim poly-A tails for RNA-seq). This
  operator is equivalent to SAM's 'H'.
* `PAD`: The pad operator indicates that there is padding in an alignment.
  This operator is equivalent to SAM's 'P'.
* `SEQUENCE_MATCH`: This operator indicates that this portion of the aligned
  sequence exactly matches the reference (e.g., all bases are equal to the
  reference bases). This operator is equivalent to SAM's '='.
* `SEQUENCE_MISMATCH`: This operator indicates that this portion of the
  aligned sequence is an alignment match to the reference, but a sequence
  mismatch (e.g., the bases are not equal to the reference). This can
  indicate a SNP or a read error. This operator is equivalent to SAM's 'X'.
    """
    ALIGNMENT_MATCH = "ALIGNMENT_MATCH"
    INSERT = "INSERT"
    DELETE = "DELETE"
    SKIP = "SKIP"
    CLIP_SOFT = "CLIP_SOFT"
    CLIP_HARD = "CLIP_HARD"
    PAD = "PAD"
    SEQUENCE_MATCH = "SEQUENCE_MATCH"
    SEQUENCE_MISMATCH = "SEQUENCE_MISMATCH"


class CigarUnit(ProtocolElement):
    """
A structure for an instance of a CIGAR operation.
    """
    _schemaSource = """
{"namespace": "org.ga4gh.models", "type": "record", "name":
"CigarUnit", "fields": [{"doc": "", "type": {"symbols":
["ALIGNMENT_MATCH", "INSERT", "DELETE", "SKIP", "CLIP_SOFT",
"CLIP_HARD", "PAD", "SEQUENCE_MATCH", "SEQUENCE_MISMATCH"], "doc": "",
"type": "enum", "name": "CigarOperation"}, "name": "operation"},
{"doc": "", "type": "long", "name": "operationLength"}, {"default":
null, "doc": "", "type": ["null", "string"], "name":
"referenceSequence"}], "doc": ""}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = set([
        "operation",
        "operationLength",
    ])

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return embeddedTypes[fieldName]

    __slots__ = ['operation', 'operationLength', 'referenceSequence']

    def __init__(self):
        self.operation = None
        self.operationLength = None
        self.referenceSequence = None


class DataSetResource(ProtocolElement):
    """
DataSetResource
    """
    _schemaSource = """
{"namespace": "org.ga4gh.beacon", "type": "record", "name":
"DataSetResource", "fields": [{"doc": "", "type": "string", "name":
"id"}, {"doc": "", "type": "string", "name": "reference"}, {"default":
null, "doc": "", "type": ["null", "string"], "name": "description"},
{"default": null, "doc": "", "type": ["null", {"doc": "", "type":
"record", "name": "DataSizeResource", "fields": [{"doc": "", "type":
"int", "name": "variants"}, {"doc": "", "type": "int", "name":
"samples"}]}], "name": "size"}, {"doc": "", "type": "boolean", "name":
"multiple"}, {"default": [], "doc": "", "type": {"items": "string",
"type": "array"}, "name": "datasets"}, {"default": [], "doc": "",
"type": {"items": {"doc": "", "type": "record", "name":
"DataUseResource", "fields": [{"doc": "", "type": "string", "name":
"category"}, {"default": null, "doc": "", "type": ["null", "string"],
"name": "description"}, {"default": [], "doc": "", "type": {"items":
{"doc": "", "type": "record", "name": "DataUseRequirementResource",
"fields": [{"doc": "", "type": "string", "name": "name"}, {"default":
null, "doc": "", "type": ["null", "string"], "name": "description"}]},
"type": "array"}, "name": "requirements"}]}, "type": "array"}, "name":
"data_use"}], "doc": ""}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = set([
        "id",
        "multiple",
        "reference",
    ])

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'data_use': DataUseResource,
            'size': DataSizeResource,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'data_use': DataUseResource,
            'size': DataSizeResource,
        }
        return embeddedTypes[fieldName]

    __slots__ = ['data_use', 'datasets', 'description', 'id', 'multiple',
                 'reference', 'size']

    def __init__(self):
        self.data_use = []
        self.datasets = []
        self.description = None
        self.id = None
        self.multiple = None
        self.reference = None
        self.size = None


class DataSizeResource(ProtocolElement):
    """
DataSetSizeResource
    """
    _schemaSource = """
{"namespace": "org.ga4gh.beacon", "type": "record", "name":
"DataSizeResource", "fields": [{"doc": "", "type": "int", "name":
"variants"}, {"doc": "", "type": "int", "name": "samples"}], "doc":
""}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = set([
        "samples",
        "variants",
    ])

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return embeddedTypes[fieldName]

    __slots__ = ['samples', 'variants']

    def __init__(self):
        self.samples = None
        self.variants = None


class DataUseRequirementResource(ProtocolElement):
    """
DataUseRequirementResource
    """
    _schemaSource = """
{"namespace": "org.ga4gh.beacon", "type": "record", "name":
"DataUseRequirementResource", "fields": [{"doc": "", "type": "string",
"name": "name"}, {"default": null, "doc": "", "type": ["null",
"string"], "name": "description"}], "doc": ""}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = set(["name"])

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return embeddedTypes[fieldName]

    __slots__ = ['description', 'name']

    def __init__(self):
        self.description = None
        self.name = None


class DataUseResource(ProtocolElement):
    """
DataUseResource
    """
    _schemaSource = """
{"namespace": "org.ga4gh.beacon", "type": "record", "name":
"DataUseResource", "fields": [{"doc": "", "type": "string", "name":
"category"}, {"default": null, "doc": "", "type": ["null", "string"],
"name": "description"}, {"default": [], "doc": "", "type": {"items":
{"doc": "", "type": "record", "name": "DataUseRequirementResource",
"fields": [{"doc": "", "type": "string", "name": "name"}, {"default":
null, "doc": "", "type": ["null", "string"], "name": "description"}]},
"type": "array"}, "name": "requirements"}], "doc": ""}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = set(["category"])

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'requirements': DataUseRequirementResource,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'requirements': DataUseRequirementResource,
        }
        return embeddedTypes[fieldName]

    __slots__ = ['category', 'description', 'requirements']

    def __init__(self):
        self.category = None
        self.description = None
        self.requirements = []


class Dataset(ProtocolElement):
    """
No documentation
    """
    _schemaSource = """
{"namespace": "org.ga4gh.models", "type": "record", "name": "Dataset",
"fields": [{"doc": "", "type": "string", "name": "id"}, {"default":
null, "doc": "", "type": ["null", "string"], "name": "description"}]}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = set(["id"])

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return embeddedTypes[fieldName]

    __slots__ = ['description', 'id']

    def __init__(self):
        self.description = None
        self.id = None


class ErrorResource(ProtocolElement):
    """
ErrorResource
    """
    _schemaSource = """
{"namespace": "org.ga4gh.beacon", "type": "record", "name":
"ErrorResource", "fields": [{"doc": "", "type": "string", "name":
"name"}, {"default": null, "doc": "", "type": ["null", "string"],
"name": "description"}], "doc": ""}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = set(["name"])

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return embeddedTypes[fieldName]

    __slots__ = ['description', 'name']

    def __init__(self):
        self.description = None
        self.name = None


class Experiment(ProtocolElement):
    """
No documentation
    """
    _schemaSource = """
{"namespace": "org.ga4gh.models", "type": "record", "name":
"Experiment", "fields": [{"default": null, "doc": "", "type": ["null",
"string"], "name": "libraryId"}, {"default": null, "doc": "", "type":
["null", "string"], "name": "platformUnit"}, {"doc": "", "type":
["null", "string"], "name": "sequencingCenter"}, {"doc": "", "type":
["null", "string"], "name": "instrumentModel"}]}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = set([
        "instrumentModel",
        "sequencingCenter",
    ])

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return embeddedTypes[fieldName]

    __slots__ = ['instrumentModel', 'libraryId', 'platformUnit',
                 'sequencingCenter']

    def __init__(self):
        self.instrumentModel = None
        self.libraryId = None
        self.platformUnit = None
        self.sequencingCenter = None


class GAException(ProtocolElement):
    """
A general exception type.
    """
    _schemaSource = """
{"namespace": "org.ga4gh.methods", "type": "error", "name":
"GAException", "fields": [{"doc": "", "type": "string", "name":
"message"}, {"default": -1, "doc": "", "type": "int", "name":
"errorCode"}], "doc": ""}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = set(["message"])

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return embeddedTypes[fieldName]

    __slots__ = ['errorCode', 'message']

    def __init__(self):
        self.errorCode = -1
        self.message = None


class ExpressionLevel(ProtocolElement):
    """
The actual FPKM data for each feature.
    """
    _schemaSource = """
{"namespace": "org.ga4gh", "type": "record", "name":
"ExpressionLevel", "fields": [{"doc": "", "type": "string", "name":
"id"}, {"doc": "", "type": "string", "name": "featureGroupId"},
{"doc": "", "type": "string", "name": "annotationId"}, {"doc": "",
"type": "float", "name": "rawReadCount"}, {"default": null, "doc": "",
"type": ["null", "float"], "name": "expression"}, {"default": false,
"doc": "", "type": ["null", "boolean"], "name": "isNormalized"},
{"default": null, "doc": "", "type": ["null", {"symbols": ["FPKM",
"RPM"], "doc": "", "type": "enum", "name": "ExpressionUnits"}],
"name": "units"}, {"default": null, "doc": "", "type": ["null",
"float"], "name": "score"}], "doc": ""}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = set([
        "annotationId",
        "featureGroupId",
        "id",
        "rawReadCount",
    ])

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return embeddedTypes[fieldName]

    __slots__ = ['annotationId', 'expression', 'featureGroupId', 'id',
                 'isNormalized', 'rawReadCount', 'score',
                 'units']

    def __init__(self):
        self.annotationId = None
        self.expression = None
        self.featureGroupId = None
        self.id = None
        self.isNormalized = False
        self.rawReadCount = None
        self.score = None
        self.units = None


class ExpressionUnits(object):
    """
Units for expression level
    """
    FPKM = "FPKM"
    RPM = "RPM"


class FeatureGroup(ProtocolElement):
    """
Identifying information for annotated features.
    """
    _schemaSource = """
{"namespace": "org.ga4gh", "type": "record", "name": "FeatureGroup",
"fields": [{"doc": "", "type": "string", "name": "id"}, {"doc": "",
"type": "string", "name": "analysisId"}, {"default": null, "doc": "",
"type": ["null", "string"], "name": "name"}, {"default": null, "doc":
"", "type": ["null", "string"], "name": "description"}, {"default":
null, "doc": "", "type": ["null", "long"], "name": "created"},
{"default": null, "doc": "", "type": ["null", "long"], "name":
"updated"}, {"default": {}, "doc": "", "type": {"values": {"items":
"string", "type": "array"}, "type": "map"}, "name": "info"}], "doc":
""}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = set([
        "analysisId",
        "id",
    ])

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return embeddedTypes[fieldName]

    __slots__ = ['analysisId', 'created', 'description', 'id', 'info', 'name',
                 'updated']

    def __init__(self):
        self.analysisId = None
        self.created = None
        self.description = None
        self.id = None
        self.info = {}
        self.name = None
        self.updated = None


class GeneticSex(object):
    """
* `FEMALE`: Genetic/chromosomal female
* `MALE`: Genetic/chromosomal male
* `OTHER`: sex information ambiguous, e.g. not clear XX/XY/ZZ...
* `MIXED_SAMPLE`: Multiple samples, e.g. pooled, environmental
* `NOT_APPLICABLE`: Used for prokaryotes, snails, etc. Not used for humans.
    """
    FEMALE = "FEMALE"
    MALE = "MALE"
    OTHER = "OTHER"
    MIXED_SAMPLE = "MIXED_SAMPLE"
    NOT_APPLICABLE = "NOT_APPLICABLE"


class Individual(ProtocolElement):
    """
An individual (or subject) typically corresponds to an individual
human or other organism.
    """
    _schemaSource = """
{"namespace": "org.ga4gh.models", "type": "record", "name":
"Individual", "fields": [{"doc": "", "type": "string", "name": "id"},
{"default": [], "doc": "", "type": {"items": "string", "type":
"array"}, "name": "groupIds"}, {"default": null, "doc": "", "type":
["null", "string"], "name": "name"}, {"default": null, "doc": "",
"type": ["null", "string"], "name": "description"}, {"default": null,
"doc": "", "type": ["null", "long"], "name": "created"}, {"default":
null, "doc": "", "type": ["null", "long"], "name": "updated"},
{"default": null, "doc": "", "type": ["null", {"doc": "", "type":
"record", "name": "OntologyTerm", "fields": [{"doc": "", "type":
"string", "name": "ontologySource"}, {"doc": "", "type": "string",
"name": "id"}, {"default": null, "doc": "", "type": ["null",
"string"], "name": "name"}]}], "name": "species"}, {"default": null,
"doc": "", "type": {"symbols": ["FEMALE", "MALE", "OTHER",
"MIXED_SAMPLE", "NOT_APPLICABLE"], "doc": "", "type": "enum", "name":
"GeneticSex"}, "name": "sex"}, {"default": null, "doc": "", "type":
["null", "OntologyTerm"], "name": "developmentalStage"}, {"default":
null, "doc": "", "type": ["null", "long"], "name": "dateOfBirth"},
{"default": [], "doc": "", "type": {"items": "OntologyTerm", "type":
"array"}, "name": "diseases"}, {"default": [], "doc": "", "type":
{"items": "OntologyTerm", "type": "array"}, "name": "phenotypes"},
{"default": null, "doc": "", "type": ["null", "string"], "name":
"stagingSystem"}, {"default": null, "doc": "", "type": ["null",
"string"], "name": "clinicalTreatment"}, {"default": null, "doc": "",
"type": ["null", "string"], "name": "strain"}, {"default": {}, "doc":
"", "type": {"values": {"items": "string", "type": "array"}, "type":
"map"}, "name": "info"}], "doc": ""}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = set(["id"])

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'developmentalStage': OntologyTerm,
            'diseases': OntologyTerm,
            'phenotypes': OntologyTerm,
            'species': OntologyTerm,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'developmentalStage': OntologyTerm,
            'diseases': OntologyTerm,
            'phenotypes': OntologyTerm,
            'species': OntologyTerm,
        }
        return embeddedTypes[fieldName]

    __slots__ = ['clinicalTreatment', 'created', 'dateOfBirth', 'description',
                 'developmentalStage', 'diseases', 'groupIds',
                 'id', 'info', 'name', 'phenotypes', 'sex',
                 'species', 'stagingSystem', 'strain',
                 'updated']

    def __init__(self):
        self.clinicalTreatment = None
        self.created = None
        self.dateOfBirth = None
        self.description = None
        self.developmentalStage = None
        self.diseases = []
        self.groupIds = []
        self.id = None
        self.info = {}
        self.name = None
        self.phenotypes = []
        self.sex = None
        self.species = None
        self.stagingSystem = None
        self.strain = None
        self.updated = None


class IndividualGroup(ProtocolElement):
    """
Represents a group of individuals. (e.g. a trio)
    """
    _schemaSource = """
{"namespace": "org.ga4gh.models", "type": "record", "name":
"IndividualGroup", "fields": [{"doc": "", "type": "string", "name":
"id"}, {"default": null, "doc": "", "type": ["null", "string"],
"name": "name"}, {"default": null, "doc": "", "type": ["null",
"string"], "name": "description"}, {"default": null, "doc": "",
"type": ["null", "long"], "name": "created"}, {"default": null, "doc":
"", "type": ["null", "long"], "name": "updated"}, {"default": null,
"doc": "", "type": ["null", "string"], "name": "type"}, {"default":
{}, "doc": "", "type": {"values": {"items": "string", "type":
"array"}, "type": "map"}, "name": "info"}], "doc": ""}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = set(["id"])

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return embeddedTypes[fieldName]

    __slots__ = ['created', 'description', 'id', 'info', 'name', 'type',
                 'updated']

    def __init__(self):
        self.created = None
        self.description = None
        self.id = None
        self.info = {}
        self.name = None
        self.type = None
        self.updated = None


class LinearAlignment(ProtocolElement):
    """
A linear alignment can be represented by one CIGAR string.
    """
    _schemaSource = """
{"namespace": "org.ga4gh.models", "type": "record", "name":
"LinearAlignment", "fields": [{"doc": "", "type": {"doc": "", "type":
"record", "name": "Position", "fields": [{"doc": "", "type": "string",
"name": "referenceName"}, {"doc": "", "type": "long", "name":
"position"}, {"doc": "", "type": {"symbols": ["POS_STRAND",
"NEG_STRAND", "NO_STRAND"], "doc": "", "type": "enum", "name":
"Strand"}, "name": "strand"}]}, "name": "position"}, {"default": null,
"doc": "", "type": ["null", "int"], "name": "mappingQuality"},
{"default": [], "doc": "", "type": {"items": {"doc": "", "type":
"record", "name": "CigarUnit", "fields": [{"doc": "", "type":
{"symbols": ["ALIGNMENT_MATCH", "INSERT", "DELETE", "SKIP",
"CLIP_SOFT", "CLIP_HARD", "PAD", "SEQUENCE_MATCH",
"SEQUENCE_MISMATCH"], "doc": "", "type": "enum", "name":
"CigarOperation"}, "name": "operation"}, {"doc": "", "type": "long",
"name": "operationLength"}, {"default": null, "doc": "", "type":
["null", "string"], "name": "referenceSequence"}]}, "type": "array"},
"name": "cigar"}], "doc": ""}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = set(["position"])

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'cigar': CigarUnit,
            'position': Position,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'cigar': CigarUnit,
            'position': Position,
        }
        return embeddedTypes[fieldName]

    __slots__ = ['cigar', 'mappingQuality', 'position']

    def __init__(self):
        self.cigar = []
        self.mappingQuality = None
        self.position = None


class ListReferenceBasesRequest(ProtocolElement):
    """
The query parameters for a request to `GET /references/{id}/bases`, for
example:

`GET /references/{id}/bases?start=100&end=200`
    """
    _schemaSource = """
{"namespace": "org.ga4gh.methods", "type": "record", "name":
"ListReferenceBasesRequest", "fields": [{"default": 0, "doc": "",
"type": "long", "name": "start"}, {"default": null, "doc": "", "type":
["null", "long"], "name": "end"}, {"default": null, "doc": "", "type":
["null", "string"], "name": "pageToken"}], "doc": ""}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = set([])

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return embeddedTypes[fieldName]

    __slots__ = ['end', 'pageToken', 'start']

    def __init__(self):
        self.end = None
        self.pageToken = None
        self.start = 0


class ListReferenceBasesResponse(ProtocolElement):
    """
The response from `GET /references/{id}/bases` expressed as JSON.
    """
    _schemaSource = """
{"namespace": "org.ga4gh.methods", "type": "record", "name":
"ListReferenceBasesResponse", "fields": [{"default": 0, "doc": "",
"type": "long", "name": "offset"}, {"doc": "", "type": "string",
"name": "sequence"}, {"default": null, "doc": "", "type": ["null",
"string"], "name": "nextPageToken"}], "doc": ""}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = set(["sequence"])

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return embeddedTypes[fieldName]

    __slots__ = ['nextPageToken', 'offset', 'sequence']

    def __init__(self):
        self.nextPageToken = None
        self.offset = 0
        self.sequence = None


class OntologyTerm(ProtocolElement):
    """
An ontology term describing an attribute. (e.g. the phenotype attribute
'polydactyly' from HPO)
    """
    _schemaSource = """
{"namespace": "org.ga4gh.models", "type": "record", "name":
"OntologyTerm", "fields": [{"doc": "", "type": "string", "name":
"ontologySource"}, {"doc": "", "type": "string", "name": "id"},
{"default": null, "doc": "", "type": ["null", "string"], "name":
"name"}], "doc": ""}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = set([
        "id",
        "ontologySource",
    ])

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return embeddedTypes[fieldName]

    __slots__ = ['id', 'name', 'ontologySource']

    def __init__(self):
        self.id = None
        self.name = None
        self.ontologySource = None


class Position(ProtocolElement):
    """
An abstraction for referring to a genomic position, in relation to some
already known reference. For now, represents a genomic position as a reference
name, a base number on that reference (0-based), and a flag to say if it's the
forward or reverse strand that we're talking about.
    """
    _schemaSource = """
{"namespace": "org.ga4gh.models", "type": "record", "name":
"Position", "fields": [{"doc": "", "type": "string", "name":
"referenceName"}, {"doc": "", "type": "long", "name": "position"},
{"doc": "", "type": {"symbols": ["POS_STRAND", "NEG_STRAND",
"NO_STRAND"], "doc": "", "type": "enum", "name": "Strand"}, "name":
"strand"}], "doc": ""}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = set([
        "position",
        "referenceName",
        "strand",
    ])

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return embeddedTypes[fieldName]

    __slots__ = ['position', 'referenceName', 'strand']

    def __init__(self):
        self.position = None
        self.referenceName = None
        self.strand = None


class Program(ProtocolElement):
    """
No documentation
    """
    _schemaSource = """
{"namespace": "org.ga4gh.models", "type": "record", "name": "Program",
"fields": [{"default": null, "doc": "", "type": ["null", "string"],
"name": "commandLine"}, {"default": null, "doc": "", "type": ["null",
"string"], "name": "id"}, {"default": null, "doc": "", "type":
["null", "string"], "name": "name"}, {"default": null, "doc": "",
"type": ["null", "string"], "name": "prevProgramId"}, {"default":
null, "doc": "", "type": ["null", "string"], "name": "version"}]}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = set([])

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return embeddedTypes[fieldName]

    __slots__ = ['commandLine', 'id', 'name', 'prevProgramId', 'version']

    def __init__(self):
        self.commandLine = None
        self.id = None
        self.name = None
        self.prevProgramId = None
        self.version = None


class QueryResource(ProtocolElement):
    """
A request for information about a specific site
    """
    _schemaSource = """
{"namespace": "org.ga4gh.beacon", "type": "record", "name":
"QueryResource", "fields": [{"doc": "", "type": "string", "name":
"allele"}, {"doc": "", "type": "string", "name": "chromosome"},
{"doc": "", "type": "long", "name": "position"}, {"doc": "", "type":
"string", "name": "reference"}, {"default": null, "doc": "", "type":
["null", "string"], "name": "dataset"}], "doc": ""}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = set([
        "allele",
        "chromosome",
        "position",
        "reference",
    ])

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return embeddedTypes[fieldName]

    __slots__ = ['allele', 'chromosome', 'dataset', 'position', 'reference']

    def __init__(self):
        self.allele = None
        self.chromosome = None
        self.dataset = None
        self.position = None
        self.reference = None


class ReadAlignment(ProtocolElement):
    """
Each read alignment describes a linear alignment with additional information
about the fragment and the read. A read alignment object is equivalent to a
line in a SAM file.
    """
    _schemaSource = """
{"namespace": "org.ga4gh.models", "type": "record", "name":
"ReadAlignment", "fields": [{"doc": "", "type": ["null", "string"],
"name": "id"}, {"doc": "", "type": "string", "name": "readGroupId"},
{"doc": "", "type": "string", "name": "fragmentName"}, {"default":
false, "doc": "", "type": ["boolean", "null"], "name":
"properPlacement"}, {"default": false, "doc": "", "type": ["boolean",
"null"], "name": "duplicateFragment"}, {"default": null, "doc": "",
"type": ["null", "int"], "name": "numberReads"}, {"default": null,
"doc": "", "type": ["null", "int"], "name": "fragmentLength"},
{"default": null, "doc": "", "type": ["null", "int"], "name":
"readNumber"}, {"default": false, "doc": "", "type": ["boolean",
"null"], "name": "failedVendorQualityChecks"}, {"default": null,
"doc": "", "type": ["null", {"doc": "", "type": "record", "name":
"LinearAlignment", "fields": [{"doc": "", "type": {"doc": "", "type":
"record", "name": "Position", "fields": [{"doc": "", "type": "string",
"name": "referenceName"}, {"doc": "", "type": "long", "name":
"position"}, {"doc": "", "type": {"symbols": ["POS_STRAND",
"NEG_STRAND", "NO_STRAND"], "doc": "", "type": "enum", "name":
"Strand"}, "name": "strand"}]}, "name": "position"}, {"default": null,
"doc": "", "type": ["null", "int"], "name": "mappingQuality"},
{"default": [], "doc": "", "type": {"items": {"doc": "", "type":
"record", "name": "CigarUnit", "fields": [{"doc": "", "type":
{"symbols": ["ALIGNMENT_MATCH", "INSERT", "DELETE", "SKIP",
"CLIP_SOFT", "CLIP_HARD", "PAD", "SEQUENCE_MATCH",
"SEQUENCE_MISMATCH"], "doc": "", "type": "enum", "name":
"CigarOperation"}, "name": "operation"}, {"doc": "", "type": "long",
"name": "operationLength"}, {"default": null, "doc": "", "type":
["null", "string"], "name": "referenceSequence"}]}, "type": "array"},
"name": "cigar"}]}], "name": "alignment"}, {"default": false, "doc":
"", "type": ["boolean", "null"], "name": "secondaryAlignment"},
{"default": false, "doc": "", "type": ["boolean", "null"], "name":
"supplementaryAlignment"}, {"default": null, "doc": "", "type":
["null", "string"], "name": "alignedSequence"}, {"default": [], "doc":
"", "type": {"items": "int", "type": "array"}, "name":
"alignedQuality"}, {"default": null, "doc": "", "type": ["null",
"Position"], "name": "nextMatePosition"}, {"default": {}, "doc": "",
"type": {"values": {"items": "string", "type": "array"}, "type":
"map"}, "name": "info"}], "doc": ""}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = set([
        "fragmentName",
        "id",
        "readGroupId",
    ])

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'alignment': LinearAlignment,
            'nextMatePosition': Position,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'alignment': LinearAlignment,
            'nextMatePosition': Position,
        }
        return embeddedTypes[fieldName]

    __slots__ = ['alignedQuality', 'alignedSequence', 'alignment',
                 'duplicateFragment',
                 'failedVendorQualityChecks',
                 'fragmentLength', 'fragmentName', 'id',
                 'info', 'nextMatePosition', 'numberReads',
                 'properPlacement', 'readGroupId',
                 'readNumber', 'secondaryAlignment',
                 'supplementaryAlignment']

    def __init__(self):
        self.alignedQuality = []
        self.alignedSequence = None
        self.alignment = None
        self.duplicateFragment = False
        self.failedVendorQualityChecks = False
        self.fragmentLength = None
        self.fragmentName = None
        self.id = None
        self.info = {}
        self.nextMatePosition = None
        self.numberReads = None
        self.properPlacement = False
        self.readGroupId = None
        self.readNumber = None
        self.secondaryAlignment = False
        self.supplementaryAlignment = False


class ReadGroup(ProtocolElement):
    """
No documentation
    """
    _schemaSource = """
{"namespace": "org.ga4gh.models", "type": "record", "name":
"ReadGroup", "fields": [{"doc": "", "type": "string", "name": "id"},
{"default": null, "doc": "", "type": ["null", "string"], "name":
"datasetId"}, {"default": null, "doc": "", "type": ["null", "string"],
"name": "name"}, {"default": null, "doc": "", "type": ["null",
"string"], "name": "description"}, {"doc": "", "type": ["null",
"string"], "name": "sampleId"}, {"doc": "", "type": ["null",
{"fields": [{"default": null, "doc": "", "type": ["null", "string"],
"name": "libraryId"}, {"default": null, "doc": "", "type": ["null",
"string"], "name": "platformUnit"}, {"doc": "", "type": ["null",
"string"], "name": "sequencingCenter"}, {"doc": "", "type": ["null",
"string"], "name": "instrumentModel"}], "type": "record", "name":
"Experiment"}], "name": "experiment"}, {"default": null, "doc": "",
"type": ["null", "int"], "name": "predictedInsertSize"}, {"default":
null, "doc": "", "type": ["null", "long"], "name": "created"},
{"default": null, "doc": "", "type": ["null", "long"], "name":
"updated"}, {"default": null, "doc": "", "type": ["null", {"fields":
[{"default": null, "doc": "", "type": ["null", "long"], "name":
"alignedReadCount"}, {"default": null, "doc": "", "type": ["null",
"long"], "name": "unalignedReadCount"}, {"default": null, "doc": "",
"type": ["null", "long"], "name": "baseCount"}], "type": "record",
"name": "ReadStats"}], "name": "stats"}, {"default": [], "doc": "",
"type": {"items": {"fields": [{"default": null, "doc": "", "type":
["null", "string"], "name": "commandLine"}, {"default": null, "doc":
"", "type": ["null", "string"], "name": "id"}, {"default": null,
"doc": "", "type": ["null", "string"], "name": "name"}, {"default":
null, "doc": "", "type": ["null", "string"], "name": "prevProgramId"},
{"default": null, "doc": "", "type": ["null", "string"], "name":
"version"}], "type": "record", "name": "Program"}, "type": "array"},
"name": "programs"}, {"default": null, "doc": "", "type": ["null",
"string"], "name": "referenceSetId"}, {"default": {}, "doc": "",
"type": {"values": {"items": "string", "type": "array"}, "type":
"map"}, "name": "info"}]}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = set([
        "experiment",
        "id",
        "sampleId",
    ])

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'experiment': Experiment,
            'programs': Program,
            'stats': ReadStats,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'experiment': Experiment,
            'programs': Program,
            'stats': ReadStats,
        }
        return embeddedTypes[fieldName]

    __slots__ = ['created', 'datasetId', 'description', 'experiment', 'id',
                 'info', 'name', 'predictedInsertSize',
                 'programs', 'referenceSetId', 'sampleId',
                 'stats', 'updated']

    def __init__(self):
        self.created = None
        self.datasetId = None
        self.description = None
        self.experiment = None
        self.id = None
        self.info = {}
        self.name = None
        self.predictedInsertSize = None
        self.programs = []
        self.referenceSetId = None
        self.sampleId = None
        self.stats = None
        self.updated = None


class ReadGroupSet(ProtocolElement):
    """
No documentation
    """
    _schemaSource = """
{"namespace": "org.ga4gh.models", "type": "record", "name":
"ReadGroupSet", "fields": [{"doc": "", "type": "string", "name":
"id"}, {"default": null, "doc": "", "type": ["null", "string"],
"name": "datasetId"}, {"default": null, "doc": "", "type": ["null",
"string"], "name": "name"}, {"default": null, "doc": "", "type":
["null", {"fields": [{"default": null, "doc": "", "type": ["null",
"long"], "name": "alignedReadCount"}, {"default": null, "doc": "",
"type": ["null", "long"], "name": "unalignedReadCount"}, {"default":
null, "doc": "", "type": ["null", "long"], "name": "baseCount"}],
"type": "record", "name": "ReadStats"}], "name": "stats"}, {"default":
[], "doc": "", "type": {"items": {"fields": [{"doc": "", "type":
"string", "name": "id"}, {"default": null, "doc": "", "type": ["null",
"string"], "name": "datasetId"}, {"default": null, "doc": "", "type":
["null", "string"], "name": "name"}, {"default": null, "doc": "",
"type": ["null", "string"], "name": "description"}, {"doc": "",
"type": ["null", "string"], "name": "sampleId"}, {"doc": "", "type":
["null", {"fields": [{"default": null, "doc": "", "type": ["null",
"string"], "name": "libraryId"}, {"default": null, "doc": "", "type":
["null", "string"], "name": "platformUnit"}, {"doc": "", "type":
["null", "string"], "name": "sequencingCenter"}, {"doc": "", "type":
["null", "string"], "name": "instrumentModel"}], "type": "record",
"name": "Experiment"}], "name": "experiment"}, {"default": null,
"doc": "", "type": ["null", "int"], "name": "predictedInsertSize"},
{"default": null, "doc": "", "type": ["null", "long"], "name":
"created"}, {"default": null, "doc": "", "type": ["null", "long"],
"name": "updated"}, {"default": null, "doc": "", "type": ["null",
"ReadStats"], "name": "stats"}, {"default": [], "doc": "", "type":
{"items": {"fields": [{"default": null, "doc": "", "type": ["null",
"string"], "name": "commandLine"}, {"default": null, "doc": "",
"type": ["null", "string"], "name": "id"}, {"default": null, "doc":
"", "type": ["null", "string"], "name": "name"}, {"default": null,
"doc": "", "type": ["null", "string"], "name": "prevProgramId"},
{"default": null, "doc": "", "type": ["null", "string"], "name":
"version"}], "type": "record", "name": "Program"}, "type": "array"},
"name": "programs"}, {"default": null, "doc": "", "type": ["null",
"string"], "name": "referenceSetId"}, {"default": {}, "doc": "",
"type": {"values": {"items": "string", "type": "array"}, "type":
"map"}, "name": "info"}], "type": "record", "name": "ReadGroup"},
"type": "array"}, "name": "readGroups"}]}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = set(["id"])

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'readGroups': ReadGroup,
            'stats': ReadStats,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'readGroups': ReadGroup,
            'stats': ReadStats,
        }
        return embeddedTypes[fieldName]

    __slots__ = ['datasetId', 'id', 'name', 'readGroups', 'stats']

    def __init__(self):
        self.datasetId = None
        self.id = None
        self.name = None
        self.readGroups = []
        self.stats = None


class ReadStats(ProtocolElement):
    """
No documentation
    """
    _schemaSource = """
{"namespace": "org.ga4gh.models", "type": "record", "name":
"ReadStats", "fields": [{"default": null, "doc": "", "type": ["null",
"long"], "name": "alignedReadCount"}, {"default": null, "doc": "",
"type": ["null", "long"], "name": "unalignedReadCount"}, {"default":
null, "doc": "", "type": ["null", "long"], "name": "baseCount"}]}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = set([])

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return embeddedTypes[fieldName]

    __slots__ = ['alignedReadCount', 'baseCount', 'unalignedReadCount']

    def __init__(self):
        self.alignedReadCount = None
        self.baseCount = None
        self.unalignedReadCount = None


class Reference(ProtocolElement):
    """
A `Reference` is a canonical assembled contig, intended to act as a
reference coordinate space for other genomic annotations. A single
`Reference` might represent the human chromosome 1, for instance.
    """
    _schemaSource = """
{"namespace": "org.ga4gh.models", "type": "record", "name":
"Reference", "fields": [{"doc": "", "type": "string", "name": "id"},
{"doc": "", "type": "long", "name": "length"}, {"doc": "", "type":
"string", "name": "md5checksum"}, {"doc": "", "type": "string",
"name": "name"}, {"default": null, "doc": "", "type": ["null",
"string"], "name": "sourceURI"}, {"doc": "", "type": {"items":
"string", "type": "array"}, "name": "sourceAccessions"}, {"default":
false, "doc": "", "type": "boolean", "name": "isDerived"}, {"default":
null, "doc": "", "type": ["null", "float"], "name":
"sourceDivergence"}, {"default": null, "doc": "", "type": ["null",
"int"], "name": "ncbiTaxonId"}], "doc": ""}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = set([
        "id",
        "length",
        "md5checksum",
        "name",
        "sourceAccessions",
    ])

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return embeddedTypes[fieldName]

    __slots__ = ['id', 'isDerived', 'length', 'md5checksum', 'name',
                 'ncbiTaxonId', 'sourceAccessions',
                 'sourceDivergence', 'sourceURI']

    def __init__(self):
        self.id = None
        self.isDerived = False
        self.length = None
        self.md5checksum = None
        self.name = None
        self.ncbiTaxonId = None
        self.sourceAccessions = None
        self.sourceDivergence = None
        self.sourceURI = None


class ReferenceSet(ProtocolElement):
    """
A `ReferenceSet` is a set of `Reference`s which typically comprise a
reference assembly, such as `GRCh38`. A `ReferenceSet` defines a common
coordinate space for comparing reference-aligned experimental data.
    """
    _schemaSource = """
{"namespace": "org.ga4gh.models", "type": "record", "name":
"ReferenceSet", "fields": [{"doc": "", "type": "string", "name":
"id"}, {"default": [], "doc": "", "type": {"items": "string", "type":
"array"}, "name": "referenceIds"}, {"doc": "", "type": "string",
"name": "md5checksum"}, {"default": null, "doc": "", "type": ["null",
"int"], "name": "ncbiTaxonId"}, {"default": null, "doc": "", "type":
["null", "string"], "name": "description"}, {"default": null, "doc":
"", "type": ["null", "string"], "name": "assemblyId"}, {"default":
null, "doc": "", "type": ["null", "string"], "name": "sourceURI"},
{"doc": "", "type": {"items": "string", "type": "array"}, "name":
"sourceAccessions"}, {"default": false, "doc": "", "type": "boolean",
"name": "isDerived"}], "doc": ""}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = set([
        "id",
        "md5checksum",
        "sourceAccessions",
    ])

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return embeddedTypes[fieldName]

    __slots__ = ['assemblyId', 'description', 'id', 'isDerived', 'md5checksum',
                 'ncbiTaxonId', 'referenceIds',
                 'sourceAccessions', 'sourceURI']

    def __init__(self):
        self.assemblyId = None
        self.description = None
        self.id = None
        self.isDerived = False
        self.md5checksum = None
        self.ncbiTaxonId = None
        self.referenceIds = []
        self.sourceAccessions = None
        self.sourceURI = None


class ResponseResource(ProtocolElement):
    """
The response to the Beacon query
    """
    _schemaSource = """
{"namespace": "org.ga4gh.beacon", "type": "record", "name":
"ResponseResource", "fields": [{"doc": "", "type": "string", "name":
"exists"}, {"default": [], "doc": "", "type": {"items": {"doc": "",
"type": "record", "name": "AlleleResource", "fields": [{"doc": "",
"type": "string", "name": "allele"}, {"doc": "", "type": "double",
"name": "frequency"}]}, "type": "array"}, "name": "frequencies"},
{"default": null, "doc": "", "type": ["null", "int"], "name":
"observed"}, {"default": null, "doc": "", "type": ["null", "string"],
"name": "info"}, {"default": null, "doc": "", "type": ["null", {"doc":
"", "type": "record", "name": "ErrorResource", "fields": [{"doc": "",
"type": "string", "name": "name"}, {"default": null, "doc": "",
"type": ["null", "string"], "name": "description"}]}], "name":
"err"}], "doc": ""}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = set(["exists"])

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'err': ErrorResource,
            'frequencies': AlleleResource,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'err': ErrorResource,
            'frequencies': AlleleResource,
        }
        return embeddedTypes[fieldName]

    __slots__ = ['err', 'exists', 'frequencies', 'info', 'observed']

    def __init__(self):
        self.err = None
        self.exists = None
        self.frequencies = []
        self.info = None
        self.observed = None


class RnaQuantification(ProtocolElement):
    """
Top level identifying information
    """
    _schemaSource = """
{"namespace": "org.ga4gh", "type": "record", "name":
"RnaQuantification", "fields": [{"doc": "", "type": "string", "name":
"id"}, {"default": null, "doc": "", "type": ["null", "string"],
"name": "name"}, {"default": null, "doc": "", "type": ["null",
"string"], "name": "description"}, {"doc": "", "type": "string",
"name": "readGroupId"}, {"default": [], "doc": "", "type": {"items":
"string", "type": "array"}, "name": "programIds"}, {"default": [],
"doc": "", "type": {"items": "string", "type": "array"}, "name":
"annotationIds"}], "doc": ""}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = set([
        "id",
        "readGroupId",
    ])

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return embeddedTypes[fieldName]

    __slots__ = ['annotationIds', 'description', 'id', 'name', 'programIds',
                 'readGroupId']

    def __init__(self):
        self.annotationIds = []
        self.description = None
        self.id = None
        self.name = None
        self.programIds = []
        self.readGroupId = None


class Sample(ProtocolElement):
    """
A biological sample used in an experiment. (e.g. whole blood from
an affected individual)
    """
    _schemaSource = """
{"namespace": "org.ga4gh.models", "type": "record", "name": "Sample",
"fields": [{"doc": "", "type": "string", "name": "id"}, {"default":
null, "doc": "", "type": ["null", "string"], "name": "individualId"},
{"default": [], "doc": "", "type": {"items": "string", "type":
"array"}, "name": "accessions"}, {"default": null, "doc": "", "type":
["null", "string"], "name": "name"}, {"default": null, "doc": "",
"type": ["null", "string"], "name": "description"}, {"default": null,
"doc": "", "type": ["null", "long"], "name": "created"}, {"default":
null, "doc": "", "type": ["null", "long"], "name": "updated"},
{"default": null, "doc": "", "type": ["null", "long"], "name":
"samplingDate"}, {"default": null, "doc": "", "type": ["null",
"long"], "name": "age"}, {"default": null, "doc": "", "type": ["null",
{"doc": "", "type": "record", "name": "OntologyTerm", "fields":
[{"doc": "", "type": "string", "name": "ontologySource"}, {"doc": "",
"type": "string", "name": "id"}, {"default": null, "doc": "", "type":
["null", "string"], "name": "name"}]}], "name": "cellType"},
{"default": null, "doc": "", "type": ["null", "OntologyTerm"], "name":
"cellLine"}, {"default": null, "doc": "", "type": ["null", "string"],
"name": "geocode"}, {"default": null, "doc": "", "type": ["null",
"string"], "name": "sampleType"}, {"default": null, "doc": "", "type":
["null", "OntologyTerm"], "name": "organismPart"}, {"default": {},
"doc": "", "type": {"values": {"items": "string", "type": "array"},
"type": "map"}, "name": "info"}], "doc": ""}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = set(["id"])

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'cellLine': OntologyTerm,
            'cellType': OntologyTerm,
            'organismPart': OntologyTerm,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'cellLine': OntologyTerm,
            'cellType': OntologyTerm,
            'organismPart': OntologyTerm,
        }
        return embeddedTypes[fieldName]

    __slots__ = ['accessions', 'age', 'cellLine', 'cellType', 'created',
                 'description', 'geocode', 'id',
                 'individualId', 'info', 'name',
                 'organismPart', 'sampleType', 'samplingDate',
                 'updated']

    def __init__(self):
        self.accessions = []
        self.age = None
        self.cellLine = None
        self.cellType = None
        self.created = None
        self.description = None
        self.geocode = None
        self.id = None
        self.individualId = None
        self.info = {}
        self.name = None
        self.organismPart = None
        self.sampleType = None
        self.samplingDate = None
        self.updated = None


class SearchAnalysesRequest(SearchRequest):
    """
This request maps to the body of `POST /analyses/search` as JSON.
    """
    _schemaSource = """
{"namespace": "org.ga4gh.methods", "type": "record", "name":
"SearchAnalysesRequest", "fields": [{"default": null, "doc": "",
"type": ["null", "string"], "name": "name"}, {"default": null, "doc":
"", "type": ["null", "int"], "name": "pageSize"}, {"default": null,
"doc": "", "type": ["null", "string"], "name": "pageToken"}], "doc":
""}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = set([])

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return embeddedTypes[fieldName]

    __slots__ = ['name', 'pageSize', 'pageToken']

    def __init__(self):
        self.name = None
        self.pageSize = None
        self.pageToken = None


class SearchAnalysesResponse(SearchResponse):
    """
This is the response from `POST /analyses/search` expressed as JSON.
    """
    _schemaSource = """
{"namespace": "org.ga4gh.methods", "type": "record", "name":
"SearchAnalysesResponse", "fields": [{"default": [], "doc": "",
"type": {"items": {"namespace": "org.ga4gh.models", "type": "record",
"name": "Analysis", "fields": [{"doc": "", "type": "string", "name":
"id"}, {"default": null, "doc": "", "type": ["null", "string"],
"name": "name"}, {"default": null, "doc": "", "type": ["null",
"string"], "name": "description"}, {"default": null, "doc": "",
"type": ["null", "long"], "name": "created"}, {"default": null, "doc":
"", "type": ["null", "long"], "name": "updated"}, {"default": null,
"doc": "", "type": ["null", "string"], "name": "type"}, {"default":
null, "doc": "", "type": {"items": "string", "type": "array"}, "name":
"software"}, {"default": {}, "doc": "", "type": {"values": {"items":
"string", "type": "array"}, "type": "map"}, "name": "info"}], "doc":
""}, "type": "array"}, "name": "analyses"}, {"default": null, "doc":
"", "type": ["null", "string"], "name": "nextPageToken"}], "doc": ""}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = set([])
    _valueListName = "analyses"

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'analyses': Analysis,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'analyses': Analysis,
        }
        return embeddedTypes[fieldName]

    __slots__ = ['analyses', 'nextPageToken']

    def __init__(self):
        self.analyses = []
        self.nextPageToken = None


class SearchCallSetsRequest(SearchRequest):
    """
This request maps to the body of `POST /callsets/search` as JSON.
    """
    _schemaSource = """
{"namespace": "org.ga4gh.methods", "type": "record", "name":
"SearchCallSetsRequest", "fields": [{"default": [], "doc": "", "type":
{"items": "string", "type": "array"}, "name": "variantSetIds"},
{"default": null, "doc": "", "type": ["null", "string"], "name":
"name"}, {"default": null, "doc": "", "type": ["null", "int"], "name":
"pageSize"}, {"default": null, "doc": "", "type": ["null", "string"],
"name": "pageToken"}], "doc": ""}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = set([])

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return embeddedTypes[fieldName]

    __slots__ = ['name', 'pageSize', 'pageToken', 'variantSetIds']

    def __init__(self):
        self.name = None
        self.pageSize = None
        self.pageToken = None
        self.variantSetIds = []


class SearchCallSetsResponse(SearchResponse):
    """
This is the response from `POST /callsets/search` expressed as JSON.
    """
    _schemaSource = """
{"namespace": "org.ga4gh.methods", "type": "record", "name":
"SearchCallSetsResponse", "fields": [{"default": [], "doc": "",
"type": {"items": {"namespace": "org.ga4gh.models", "type": "record",
"name": "CallSet", "fields": [{"doc": "", "type": "string", "name":
"id"}, {"default": null, "doc": "", "type": ["null", "string"],
"name": "name"}, {"doc": "", "type": ["null", "string"], "name":
"sampleId"}, {"default": [], "doc": "", "type": {"items": "string",
"type": "array"}, "name": "variantSetIds"}, {"default": null, "doc":
"", "type": ["null", "long"], "name": "created"}, {"default": null,
"doc": "", "type": ["null", "long"], "name": "updated"}, {"default":
{}, "doc": "", "type": {"values": {"items": "string", "type":
"array"}, "type": "map"}, "name": "info"}], "doc": ""}, "type":
"array"}, "name": "callSets"}, {"default": null, "doc": "", "type":
["null", "string"], "name": "nextPageToken"}], "doc": ""}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = set([])
    _valueListName = "callSets"

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'callSets': CallSet,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'callSets': CallSet,
        }
        return embeddedTypes[fieldName]

    __slots__ = ['callSets', 'nextPageToken']

    def __init__(self):
        self.callSets = []
        self.nextPageToken = None


class SearchExperimentsRequest(SearchRequest):
    """
This request maps to the body of `POST /experiments/search` as JSON.
    """
    _schemaSource = """
{"namespace": "org.ga4gh.methods", "type": "record", "name":
"SearchExperimentsRequest", "fields": [{"default": null, "doc": "",
"type": ["null", "string"], "name": "name"}, {"default": null, "doc":
"", "type": ["null", "int"], "name": "pageSize"}, {"default": null,
"doc": "", "type": ["null", "string"], "name": "pageToken"}], "doc":
""}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = set([])

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return embeddedTypes[fieldName]

    __slots__ = ['name', 'pageSize', 'pageToken']

    def __init__(self):
        self.name = None
        self.pageSize = None
        self.pageToken = None


class SearchExperimentsResponse(SearchResponse):
    """
This is the response from `POST /experiments/search` expressed as JSON.
    """
    _schemaSource = """
{"namespace": "org.ga4gh.methods", "type": "record", "name":
"SearchExperimentsResponse", "fields": [{"default": [], "doc": "",
"type": {"items": {"namespace": "org.ga4gh.models", "type": "record",
"name": "Experiment", "fields": [{"doc": "", "type": "string", "name":
"id"}, {"default": null, "doc": "", "type": ["null", "string"],
"name": "name"}, {"default": null, "doc": "", "type": ["null",
"string"], "name": "description"}, {"default": null, "doc": "",
"type": ["null", "long"], "name": "created"}, {"default": null, "doc":
"", "type": ["null", "long"], "name": "updated"}, {"default": null,
"doc": "", "type": ["null", "long"], "name": "runDate"}, {"default":
null, "doc": "", "type": ["null", "string"], "name": "molecule"},
{"default": null, "doc": "", "type": ["null", "string"], "name":
"strategy"}, {"default": null, "doc": "", "type": ["null", "string"],
"name": "selection"}, {"default": null, "doc": "", "type": ["null",
"string"], "name": "library"}, {"default": null, "doc": "", "type":
["null", "string"], "name": "libraryLayout"}, {"doc": "", "type":
["null", "string"], "name": "instrumentModel"}, {"default": null,
"doc": "", "type": ["null", "string"], "name": "instrumentDataFile"},
{"doc": "", "type": ["null", "string"], "name": "sequencingCenter"},
{"default": null, "doc": "", "type": ["null", "string"], "name":
"platformUnit"}, {"default": {}, "doc": "", "type": {"values":
{"items": "string", "type": "array"}, "type": "map"}, "name":
"info"}], "doc": ""}, "type": "array"}, "name": "experiments"},
{"default": null, "doc": "", "type": ["null", "string"], "name":
"nextPageToken"}], "doc": ""}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = set([])
    _valueListName = "experiments"

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'experiments': Experiment,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'experiments': Experiment,
        }
        return embeddedTypes[fieldName]

    __slots__ = ['experiments', 'nextPageToken']

    def __init__(self):
        self.experiments = []
        self.nextPageToken = None


class SearchIndividualGroupsRequest(SearchRequest):
    """
This request maps to the body of `POST /individualgroups/search` as JSON.
    """
    _schemaSource = """
{"namespace": "org.ga4gh.methods", "type": "record", "name":
"SearchIndividualGroupsRequest", "fields": [{"default": null, "doc":
"", "type": ["null", "string"], "name": "name"}, {"default": null,
"doc": "", "type": ["null", "int"], "name": "pageSize"}, {"default":
null, "doc": "", "type": ["null", "string"], "name": "pageToken"}],
"doc": ""}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = set([])

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return embeddedTypes[fieldName]

    __slots__ = ['name', 'pageSize', 'pageToken']

    def __init__(self):
        self.name = None
        self.pageSize = None
        self.pageToken = None


class SearchIndividualGroupsResponse(SearchResponse):
    """
This is the response from `POST /individualgroups/search` expressed as JSON.
    """
    _schemaSource = """
{"namespace": "org.ga4gh.methods", "type": "record", "name":
"SearchIndividualGroupsResponse", "fields": [{"default": [], "doc":
"", "type": {"items": {"namespace": "org.ga4gh.models", "type":
"record", "name": "IndividualGroup", "fields": [{"doc": "", "type":
"string", "name": "id"}, {"default": null, "doc": "", "type": ["null",
"string"], "name": "name"}, {"default": null, "doc": "", "type":
["null", "string"], "name": "description"}, {"default": null, "doc":
"", "type": ["null", "long"], "name": "created"}, {"default": null,
"doc": "", "type": ["null", "long"], "name": "updated"}, {"default":
null, "doc": "", "type": ["null", "string"], "name": "type"},
{"default": {}, "doc": "", "type": {"values": {"items": "string",
"type": "array"}, "type": "map"}, "name": "info"}], "doc": ""},
"type": "array"}, "name": "individualGroups"}, {"default": null,
"doc": "", "type": ["null", "string"], "name": "nextPageToken"}],
"doc": ""}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = set([])
    _valueListName = "individualGroups"

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'individualGroups': IndividualGroup,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'individualGroups': IndividualGroup,
        }
        return embeddedTypes[fieldName]

    __slots__ = ['individualGroups', 'nextPageToken']

    def __init__(self):
        self.individualGroups = []
        self.nextPageToken = None


class SearchIndividualsRequest(SearchRequest):
    """
This request maps to the body of `POST /individuals/search` as JSON.
    """
    _schemaSource = """
{"namespace": "org.ga4gh.methods", "type": "record", "name":
"SearchIndividualsRequest", "fields": [{"default": [], "doc": "",
"type": {"items": "string", "type": "array"}, "name": "groupIds"},
{"default": null, "doc": "", "type": ["null", "string"], "name":
"name"}, {"default": null, "doc": "", "type": ["null", "int"], "name":
"pageSize"}, {"default": null, "doc": "", "type": ["null", "string"],
"name": "pageToken"}], "doc": ""}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = set([])

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return embeddedTypes[fieldName]

    __slots__ = ['groupIds', 'name', 'pageSize', 'pageToken']

    def __init__(self):
        self.groupIds = []
        self.name = None
        self.pageSize = None
        self.pageToken = None


class SearchIndividualsResponse(SearchResponse):
    """
This is the response from `POST /individuals/search` expressed as JSON.
    """
    _schemaSource = """
{"namespace": "org.ga4gh.methods", "type": "record", "name":
"SearchIndividualsResponse", "fields": [{"default": [], "doc": "",
"type": {"items": {"namespace": "org.ga4gh.models", "type": "record",
"name": "Individual", "fields": [{"doc": "", "type": "string", "name":
"id"}, {"default": [], "doc": "", "type": {"items": "string", "type":
"array"}, "name": "groupIds"}, {"default": null, "doc": "", "type":
["null", "string"], "name": "name"}, {"default": null, "doc": "",
"type": ["null", "string"], "name": "description"}, {"default": null,
"doc": "", "type": ["null", "long"], "name": "created"}, {"default":
null, "doc": "", "type": ["null", "long"], "name": "updated"},
{"default": null, "doc": "", "type": ["null", {"doc": "", "type":
"record", "name": "OntologyTerm", "fields": [{"doc": "", "type":
"string", "name": "ontologySource"}, {"doc": "", "type": "string",
"name": "id"}, {"default": null, "doc": "", "type": ["null",
"string"], "name": "name"}]}], "name": "species"}, {"default": null,
"doc": "", "type": {"symbols": ["FEMALE", "MALE", "OTHER",
"MIXED_SAMPLE", "NOT_APPLICABLE"], "doc": "", "type": "enum", "name":
"GeneticSex"}, "name": "sex"}, {"default": null, "doc": "", "type":
["null", "OntologyTerm"], "name": "developmentalStage"}, {"default":
null, "doc": "", "type": ["null", "long"], "name": "dateOfBirth"},
{"default": [], "doc": "", "type": {"items": "OntologyTerm", "type":
"array"}, "name": "diseases"}, {"default": [], "doc": "", "type":
{"items": "OntologyTerm", "type": "array"}, "name": "phenotypes"},
{"default": null, "doc": "", "type": ["null", "string"], "name":
"stagingSystem"}, {"default": null, "doc": "", "type": ["null",
"string"], "name": "clinicalTreatment"}, {"default": null, "doc": "",
"type": ["null", "string"], "name": "strain"}, {"default": {}, "doc":
"", "type": {"values": {"items": "string", "type": "array"}, "type":
"map"}, "name": "info"}], "doc": ""}, "type": "array"}, "name":
"individuals"}, {"default": null, "doc": "", "type": ["null",
"string"], "name": "nextPageToken"}], "doc": ""}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = set([])
    _valueListName = "individuals"

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'individuals': Individual,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'individuals': Individual,
        }
        return embeddedTypes[fieldName]

    __slots__ = ['individuals', 'nextPageToken']

    def __init__(self):
        self.individuals = []
        self.nextPageToken = None


class SearchReadGroupSetsRequest(SearchRequest):
    """
This request maps to the body of `POST /readgroupsets/search` as JSON.
    """
    _schemaSource = """
{"namespace": "org.ga4gh.methods", "type": "record", "name":
"SearchReadGroupSetsRequest", "fields": [{"default": [], "doc": "",
"type": {"items": "string", "type": "array"}, "name": "datasetIds"},
{"default": null, "doc": "", "type": ["null", "string"], "name":
"name"}, {"default": null, "doc": "", "type": ["null", "int"], "name":
"pageSize"}, {"default": null, "doc": "", "type": ["null", "string"],
"name": "pageToken"}], "doc": ""}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = set([])

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return embeddedTypes[fieldName]

    __slots__ = ['datasetIds', 'name', 'pageSize', 'pageToken']

    def __init__(self):
        self.datasetIds = []
        self.name = None
        self.pageSize = None
        self.pageToken = None


class SearchReadGroupSetsResponse(SearchResponse):
    """
This is the response from `POST /readgroupsets/search` expressed as JSON.
    """
    _schemaSource = """
{"namespace": "org.ga4gh.methods", "type": "record", "name":
"SearchReadGroupSetsResponse", "fields": [{"default": [], "doc": "",
"type": {"items": {"namespace": "org.ga4gh.models", "type": "record",
"name": "ReadGroupSet", "fields": [{"doc": "", "type": "string",
"name": "id"}, {"default": null, "doc": "", "type": ["null",
"string"], "name": "datasetId"}, {"default": null, "doc": "", "type":
["null", "string"], "name": "name"}, {"default": null, "doc": "",
"type": ["null", {"fields": [{"default": null, "doc": "", "type":
["null", "long"], "name": "alignedReadCount"}, {"default": null,
"doc": "", "type": ["null", "long"], "name": "unalignedReadCount"},
{"default": null, "doc": "", "type": ["null", "long"], "name":
"baseCount"}], "type": "record", "name": "ReadStats"}], "name":
"stats"}, {"default": [], "doc": "", "type": {"items": {"fields":
[{"doc": "", "type": "string", "name": "id"}, {"default": null, "doc":
"", "type": ["null", "string"], "name": "datasetId"}, {"default":
null, "doc": "", "type": ["null", "string"], "name": "name"},
{"default": null, "doc": "", "type": ["null", "string"], "name":
"description"}, {"doc": "", "type": ["null", "string"], "name":
"sampleId"}, {"doc": "", "type": ["null", {"fields": [{"default":
null, "doc": "", "type": ["null", "string"], "name": "libraryId"},
{"default": null, "doc": "", "type": ["null", "string"], "name":
"platformUnit"}, {"doc": "", "type": ["null", "string"], "name":
"sequencingCenter"}, {"doc": "", "type": ["null", "string"], "name":
"instrumentModel"}], "type": "record", "name": "Experiment"}], "name":
"experiment"}, {"default": null, "doc": "", "type": ["null", "int"],
"name": "predictedInsertSize"}, {"default": null, "doc": "", "type":
["null", "long"], "name": "created"}, {"default": null, "doc": "",
"type": ["null", "long"], "name": "updated"}, {"default": null, "doc":
"", "type": ["null", "ReadStats"], "name": "stats"}, {"default": [],
"doc": "", "type": {"items": {"fields": [{"default": null, "doc": "",
"type": ["null", "string"], "name": "commandLine"}, {"default": null,
"doc": "", "type": ["null", "string"], "name": "id"}, {"default":
null, "doc": "", "type": ["null", "string"], "name": "name"},
{"default": null, "doc": "", "type": ["null", "string"], "name":
"prevProgramId"}, {"default": null, "doc": "", "type": ["null",
"string"], "name": "version"}], "type": "record", "name": "Program"},
"type": "array"}, "name": "programs"}, {"default": null, "doc": "",
"type": ["null", "string"], "name": "referenceSetId"}, {"default": {},
"doc": "", "type": {"values": {"items": "string", "type": "array"},
"type": "map"}, "name": "info"}], "type": "record", "name":
"ReadGroup"}, "type": "array"}, "name": "readGroups"}]}, "type":
"array"}, "name": "readGroupSets"}, {"default": null, "doc": "",
"type": ["null", "string"], "name": "nextPageToken"}], "doc": ""}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = set([])
    _valueListName = "readGroupSets"

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'readGroupSets': ReadGroupSet,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'readGroupSets': ReadGroupSet,
        }
        return embeddedTypes[fieldName]

    __slots__ = ['nextPageToken', 'readGroupSets']

    def __init__(self):
        self.nextPageToken = None
        self.readGroupSets = []


class SearchReadsRequest(SearchRequest):
    """
This request maps to the body of `POST /reads/search` as JSON.

If a reference is specified, all queried `ReadGroup`s must be aligned
to `ReferenceSet`s containing that same `Reference`. If no reference is
specified, all `ReadGroup`s must be aligned to the same `ReferenceSet`.
    """
    _schemaSource = """
{"namespace": "org.ga4gh.methods", "type": "record", "name":
"SearchReadsRequest", "fields": [{"default": [], "doc": "", "type":
{"items": "string", "type": "array"}, "name": "readGroupIds"},
{"default": null, "doc": "", "type": ["null", "string"], "name":
"referenceId"}, {"default": 0, "doc": "", "type": ["long", "null"],
"name": "start"}, {"default": null, "doc": "", "type": ["null",
"long"], "name": "end"}, {"default": null, "doc": "", "type": ["null",
"int"], "name": "pageSize"}, {"default": null, "doc": "", "type":
["null", "string"], "name": "pageToken"}], "doc": ""}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = set([])

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return embeddedTypes[fieldName]

    __slots__ = ['end', 'pageSize', 'pageToken', 'readGroupIds', 'referenceId',
                 'start']

    def __init__(self):
        self.end = None
        self.pageSize = None
        self.pageToken = None
        self.readGroupIds = []
        self.referenceId = None
        self.start = 0


class SearchReadsResponse(SearchResponse):
    """
This is the response from `POST /reads/search` expressed as JSON.
    """
    _schemaSource = """
{"namespace": "org.ga4gh.methods", "type": "record", "name":
"SearchReadsResponse", "fields": [{"default": [], "doc": "", "type":
{"items": {"namespace": "org.ga4gh.models", "type": "record", "name":
"ReadAlignment", "fields": [{"doc": "", "type": ["null", "string"],
"name": "id"}, {"doc": "", "type": "string", "name": "readGroupId"},
{"doc": "", "type": "string", "name": "fragmentName"}, {"default":
false, "doc": "", "type": ["boolean", "null"], "name":
"properPlacement"}, {"default": false, "doc": "", "type": ["boolean",
"null"], "name": "duplicateFragment"}, {"default": null, "doc": "",
"type": ["null", "int"], "name": "numberReads"}, {"default": null,
"doc": "", "type": ["null", "int"], "name": "fragmentLength"},
{"default": null, "doc": "", "type": ["null", "int"], "name":
"readNumber"}, {"default": false, "doc": "", "type": ["boolean",
"null"], "name": "failedVendorQualityChecks"}, {"default": null,
"doc": "", "type": ["null", {"doc": "", "type": "record", "name":
"LinearAlignment", "fields": [{"doc": "", "type": {"doc": "", "type":
"record", "name": "Position", "fields": [{"doc": "", "type": "string",
"name": "referenceName"}, {"doc": "", "type": "long", "name":
"position"}, {"doc": "", "type": {"symbols": ["POS_STRAND",
"NEG_STRAND", "NO_STRAND"], "doc": "", "type": "enum", "name":
"Strand"}, "name": "strand"}]}, "name": "position"}, {"default": null,
"doc": "", "type": ["null", "int"], "name": "mappingQuality"},
{"default": [], "doc": "", "type": {"items": {"doc": "", "type":
"record", "name": "CigarUnit", "fields": [{"doc": "", "type":
{"symbols": ["ALIGNMENT_MATCH", "INSERT", "DELETE", "SKIP",
"CLIP_SOFT", "CLIP_HARD", "PAD", "SEQUENCE_MATCH",
"SEQUENCE_MISMATCH"], "doc": "", "type": "enum", "name":
"CigarOperation"}, "name": "operation"}, {"doc": "", "type": "long",
"name": "operationLength"}, {"default": null, "doc": "", "type":
["null", "string"], "name": "referenceSequence"}]}, "type": "array"},
"name": "cigar"}]}], "name": "alignment"}, {"default": false, "doc":
"", "type": ["boolean", "null"], "name": "secondaryAlignment"},
{"default": false, "doc": "", "type": ["boolean", "null"], "name":
"supplementaryAlignment"}, {"default": null, "doc": "", "type":
["null", "string"], "name": "alignedSequence"}, {"default": [], "doc":
"", "type": {"items": "int", "type": "array"}, "name":
"alignedQuality"}, {"default": null, "doc": "", "type": ["null",
"Position"], "name": "nextMatePosition"}, {"default": {}, "doc": "",
"type": {"values": {"items": "string", "type": "array"}, "type":
"map"}, "name": "info"}], "doc": ""}, "type": "array"}, "name":
"alignments"}, {"default": null, "doc": "", "type": ["null",
"string"], "name": "nextPageToken"}], "doc": ""}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = set([])
    _valueListName = "alignments"

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'alignments': ReadAlignment,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'alignments': ReadAlignment,
        }
        return embeddedTypes[fieldName]

    __slots__ = ['alignments', 'nextPageToken']

    def __init__(self):
        self.alignments = []
        self.nextPageToken = None


class SearchReferenceSetsRequest(SearchRequest):
    """
This request maps to the body of `POST /referencesets/search`
as JSON.
    """
    _schemaSource = """
{"namespace": "org.ga4gh.methods", "type": "record", "name":
"SearchReferenceSetsRequest", "fields": [{"default": [], "doc": "",
"type": {"items": "string", "type": "array"}, "name": "md5checksums"},
{"default": [], "doc": "", "type": {"items": "string", "type":
"array"}, "name": "accessions"}, {"default": null, "doc": "", "type":
["null", "string"], "name": "assemblyId"}, {"default": null, "doc":
"", "type": ["null", "int"], "name": "pageSize"}, {"default": null,
"doc": "", "type": ["null", "string"], "name": "pageToken"}], "doc":
""}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = set([])

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return embeddedTypes[fieldName]

    __slots__ = ['accessions', 'assemblyId', 'md5checksums', 'pageSize',
                 'pageToken']

    def __init__(self):
        self.accessions = []
        self.assemblyId = None
        self.md5checksums = []
        self.pageSize = None
        self.pageToken = None


class SearchReferenceSetsResponse(SearchResponse):
    """
This is the response from `POST /referencesets/search`
expressed as JSON.
    """
    _schemaSource = """
{"namespace": "org.ga4gh.methods", "type": "record", "name":
"SearchReferenceSetsResponse", "fields": [{"default": [], "doc": "",
"type": {"items": {"namespace": "org.ga4gh.models", "type": "record",
"name": "ReferenceSet", "fields": [{"doc": "", "type": "string",
"name": "id"}, {"default": [], "doc": "", "type": {"items": "string",
"type": "array"}, "name": "referenceIds"}, {"doc": "", "type":
"string", "name": "md5checksum"}, {"default": null, "doc": "", "type":
["null", "int"], "name": "ncbiTaxonId"}, {"default": null, "doc": "",
"type": ["null", "string"], "name": "description"}, {"default": null,
"doc": "", "type": ["null", "string"], "name": "assemblyId"},
{"default": null, "doc": "", "type": ["null", "string"], "name":
"sourceURI"}, {"doc": "", "type": {"items": "string", "type":
"array"}, "name": "sourceAccessions"}, {"default": false, "doc": "",
"type": "boolean", "name": "isDerived"}], "doc": ""}, "type":
"array"}, "name": "referenceSets"}, {"default": null, "doc": "",
"type": ["null", "string"], "name": "nextPageToken"}], "doc": ""}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = set([])
    _valueListName = "referenceSets"

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'referenceSets': ReferenceSet,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'referenceSets': ReferenceSet,
        }
        return embeddedTypes[fieldName]

    __slots__ = ['nextPageToken', 'referenceSets']

    def __init__(self):
        self.nextPageToken = None
        self.referenceSets = []


class SearchReferencesRequest(SearchRequest):
    """
This request maps to the body of `POST /references/search`
as JSON.
    """
    _schemaSource = """
{"namespace": "org.ga4gh.methods", "type": "record", "name":
"SearchReferencesRequest", "fields": [{"default": null, "doc": "",
"type": ["null", "string"], "name": "referenceSetId"}, {"default": [],
"doc": "", "type": {"items": "string", "type": "array"}, "name":
"md5checksums"}, {"default": [], "doc": "", "type": {"items":
"string", "type": "array"}, "name": "accessions"}, {"default": null,
"doc": "", "type": ["null", "int"], "name": "pageSize"}, {"default":
null, "doc": "", "type": ["null", "string"], "name": "pageToken"}],
"doc": ""}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = set([])

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return embeddedTypes[fieldName]

    __slots__ = ['accessions', 'md5checksums', 'pageSize', 'pageToken',
                 'referenceSetId']

    def __init__(self):
        self.accessions = []
        self.md5checksums = []
        self.pageSize = None
        self.pageToken = None
        self.referenceSetId = None


class SearchReferencesResponse(SearchResponse):
    """
This is the response from `POST /references/search` expressed as JSON.
    """
    _schemaSource = """
{"namespace": "org.ga4gh.methods", "type": "record", "name":
"SearchReferencesResponse", "fields": [{"default": [], "doc": "",
"type": {"items": {"namespace": "org.ga4gh.models", "type": "record",
"name": "Reference", "fields": [{"doc": "", "type": "string", "name":
"id"}, {"doc": "", "type": "long", "name": "length"}, {"doc": "",
"type": "string", "name": "md5checksum"}, {"doc": "", "type":
"string", "name": "name"}, {"default": null, "doc": "", "type":
["null", "string"], "name": "sourceURI"}, {"doc": "", "type":
{"items": "string", "type": "array"}, "name": "sourceAccessions"},
{"default": false, "doc": "", "type": "boolean", "name": "isDerived"},
{"default": null, "doc": "", "type": ["null", "float"], "name":
"sourceDivergence"}, {"default": null, "doc": "", "type": ["null",
"int"], "name": "ncbiTaxonId"}], "doc": ""}, "type": "array"}, "name":
"references"}, {"default": null, "doc": "", "type": ["null",
"string"], "name": "nextPageToken"}], "doc": ""}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = set([])
    _valueListName = "references"

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'references': Reference,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'references': Reference,
        }
        return embeddedTypes[fieldName]

    __slots__ = ['nextPageToken', 'references']

    def __init__(self):
        self.nextPageToken = None
        self.references = []


class SearchSamplesRequest(SearchRequest):
    """
This request maps to the body of `POST /samples/search` as JSON.
    """
    _schemaSource = """
{"namespace": "org.ga4gh.methods", "type": "record", "name":
"SearchSamplesRequest", "fields": [{"default": [], "doc": "", "type":
{"items": "string", "type": "array"}, "name": "individualIds"},
{"default": null, "doc": "", "type": ["null", "string"], "name":
"name"}, {"default": null, "doc": "", "type": ["null", "int"], "name":
"pageSize"}, {"default": null, "doc": "", "type": ["null", "string"],
"name": "pageToken"}], "doc": ""}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = set([])

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return embeddedTypes[fieldName]

    __slots__ = ['individualIds', 'name', 'pageSize', 'pageToken']

    def __init__(self):
        self.individualIds = []
        self.name = None
        self.pageSize = None
        self.pageToken = None


class SearchSamplesResponse(SearchResponse):
    """
This is the response from `POST /samples/search` expressed as JSON.
    """
    _schemaSource = """
{"namespace": "org.ga4gh.methods", "type": "record", "name":
"SearchSamplesResponse", "fields": [{"default": [], "doc": "", "type":
{"items": {"namespace": "org.ga4gh.models", "type": "record", "name":
"Sample", "fields": [{"doc": "", "type": "string", "name": "id"},
{"default": null, "doc": "", "type": ["null", "string"], "name":
"individualId"}, {"default": [], "doc": "", "type": {"items":
"string", "type": "array"}, "name": "accessions"}, {"default": null,
"doc": "", "type": ["null", "string"], "name": "name"}, {"default":
null, "doc": "", "type": ["null", "string"], "name": "description"},
{"default": null, "doc": "", "type": ["null", "long"], "name":
"created"}, {"default": null, "doc": "", "type": ["null", "long"],
"name": "updated"}, {"default": null, "doc": "", "type": ["null",
"long"], "name": "samplingDate"}, {"default": null, "doc": "", "type":
["null", "long"], "name": "age"}, {"default": null, "doc": "", "type":
["null", {"doc": "", "type": "record", "name": "OntologyTerm",
"fields": [{"doc": "", "type": "string", "name": "ontologySource"},
{"doc": "", "type": "string", "name": "id"}, {"default": null, "doc":
"", "type": ["null", "string"], "name": "name"}]}], "name":
"cellType"}, {"default": null, "doc": "", "type": ["null",
"OntologyTerm"], "name": "cellLine"}, {"default": null, "doc": "",
"type": ["null", "string"], "name": "geocode"}, {"default": null,
"doc": "", "type": ["null", "string"], "name": "sampleType"},
{"default": null, "doc": "", "type": ["null", "OntologyTerm"], "name":
"organismPart"}, {"default": {}, "doc": "", "type": {"values":
{"items": "string", "type": "array"}, "type": "map"}, "name":
"info"}], "doc": ""}, "type": "array"}, "name": "samples"},
{"default": null, "doc": "", "type": ["null", "string"], "name":
"nextPageToken"}], "doc": ""}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = set([])
    _valueListName = "samples"

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'samples': Sample,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'samples': Sample,
        }
        return embeddedTypes[fieldName]

    __slots__ = ['nextPageToken', 'samples']

    def __init__(self):
        self.nextPageToken = None
        self.samples = []


class SearchVariantSetsRequest(SearchRequest):
    """
This request maps to the body of `POST /variantsets/search` as JSON.
    """
    _schemaSource = """
{"namespace": "org.ga4gh.methods", "type": "record", "name":
"SearchVariantSetsRequest", "fields": [{"default": [], "doc": "",
"type": {"items": "string", "type": "array"}, "name": "datasetIds"},
{"default": null, "doc": "", "type": ["null", "int"], "name":
"pageSize"}, {"default": null, "doc": "", "type": ["null", "string"],
"name": "pageToken"}], "doc": ""}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = set([])

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return embeddedTypes[fieldName]

    __slots__ = ['datasetIds', 'pageSize', 'pageToken']

    def __init__(self):
        self.datasetIds = []
        self.pageSize = None
        self.pageToken = None


class SearchVariantSetsResponse(SearchResponse):
    """
This is the response from `POST /variantsets/search` expressed as JSON.
    """
    _schemaSource = """
{"namespace": "org.ga4gh.methods", "type": "record", "name":
"SearchVariantSetsResponse", "fields": [{"default": [], "doc": "",
"type": {"items": {"namespace": "org.ga4gh.models", "type": "record",
"name": "VariantSet", "fields": [{"doc": "", "type": "string", "name":
"id"}, {"doc": "", "type": "string", "name": "datasetId"}, {"doc": "",
"type": "string", "name": "referenceSetId"}, {"default": [], "doc":
"", "type": {"items": {"doc": "", "type": "record", "name":
"VariantSetMetadata", "fields": [{"doc": "", "type": "string", "name":
"key"}, {"doc": "", "type": "string", "name": "value"}, {"doc": "",
"type": "string", "name": "id"}, {"doc": "", "type": "string", "name":
"type"}, {"doc": "", "type": "string", "name": "number"}, {"doc": "",
"type": "string", "name": "description"}, {"default": {}, "doc": "",
"type": {"values": {"items": "string", "type": "array"}, "type":
"map"}, "name": "info"}]}, "type": "array"}, "name": "metadata"}],
"doc": ""}, "type": "array"}, "name": "variantSets"}, {"default":
null, "doc": "", "type": ["null", "string"], "name":
"nextPageToken"}], "doc": ""}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = set([])
    _valueListName = "variantSets"

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'variantSets': VariantSet,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'variantSets': VariantSet,
        }
        return embeddedTypes[fieldName]

    __slots__ = ['nextPageToken', 'variantSets']

    def __init__(self):
        self.nextPageToken = None
        self.variantSets = []


class SearchVariantsRequest(SearchRequest):
    """
This request maps to the body of `POST /variants/search` as JSON.
    """
    _schemaSource = """
{"namespace": "org.ga4gh.methods", "type": "record", "name":
"SearchVariantsRequest", "fields": [{"default": [], "doc": "", "type":
{"items": "string", "type": "array"}, "name": "variantSetIds"},
{"default": null, "doc": "", "type": ["null", "string"], "name":
"variantName"}, {"default": null, "doc": "", "type": ["null",
{"items": "string", "type": "array"}], "name": "callSetIds"}, {"doc":
"", "type": "string", "name": "referenceName"}, {"doc": "", "type":
"long", "name": "start"}, {"doc": "", "type": "long", "name": "end"},
{"default": null, "doc": "", "type": ["null", "int"], "name":
"pageSize"}, {"default": null, "doc": "", "type": ["null", "string"],
"name": "pageToken"}], "doc": ""}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = set([
        "end",
        "referenceName",
        "start",
    ])

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return embeddedTypes[fieldName]

    __slots__ = ['callSetIds', 'end', 'pageSize', 'pageToken', 'referenceName',
                 'start', 'variantName', 'variantSetIds']

    def __init__(self):
        self.callSetIds = None
        self.end = None
        self.pageSize = None
        self.pageToken = None
        self.referenceName = None
        self.start = None
        self.variantName = None
        self.variantSetIds = []


class SearchVariantsResponse(SearchResponse):
    """
This is the response from `POST /variants/search` expressed as JSON.
    """
    _schemaSource = """
{"namespace": "org.ga4gh.methods", "type": "record", "name":
"SearchVariantsResponse", "fields": [{"default": [], "doc": "",
"type": {"items": {"namespace": "org.ga4gh.models", "type": "record",
"name": "Variant", "fields": [{"doc": "", "type": "string", "name":
"id"}, {"doc": "", "type": "string", "name": "variantSetId"},
{"default": [], "doc": "", "type": {"items": "string", "type":
"array"}, "name": "names"}, {"default": null, "doc": "", "type":
["null", "long"], "name": "created"}, {"default": null, "doc": "",
"type": ["null", "long"], "name": "updated"}, {"doc": "", "type":
"string", "name": "referenceName"}, {"doc": "", "type": "long",
"name": "start"}, {"doc": "", "type": "long", "name": "end"}, {"doc":
"", "type": "string", "name": "referenceBases"}, {"default": [],
"doc": "", "type": {"items": "string", "type": "array"}, "name":
"alternateBases"}, {"default": {}, "doc": "", "type": {"values":
{"items": "string", "type": "array"}, "type": "map"}, "name": "info"},
{"default": [], "doc": "", "type": {"items": {"doc": "", "type":
"record", "name": "Call", "fields": [{"doc": "", "type": ["null",
"string"], "name": "callSetId"}, {"default": null, "doc": "", "type":
["null", "string"], "name": "callSetName"}, {"default": [], "doc": "",
"type": {"items": "int", "type": "array"}, "name": "genotype"},
{"default": null, "doc": "", "type": ["null", "string"], "name":
"phaseset"}, {"default": [], "doc": "", "type": {"items": "double",
"type": "array"}, "name": "genotypeLikelihood"}, {"default": {},
"doc": "", "type": {"values": {"items": "string", "type": "array"},
"type": "map"}, "name": "info"}]}, "type": "array"}, "name":
"calls"}], "doc": ""}, "type": "array"}, "name": "variants"},
{"default": null, "doc": "", "type": ["null", "string"], "name":
"nextPageToken"}], "doc": ""}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = set([])
    _valueListName = "variants"

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'variants': Variant,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'variants': Variant,
        }
        return embeddedTypes[fieldName]

    __slots__ = ['nextPageToken', 'variants']

    def __init__(self):
        self.nextPageToken = None
        self.variants = []


class Strand(object):
    """
Indicates the DNA strand associate for some data item.
* `POS_STRAND`:  The postive (+) strand.
* `NEG_STRAND`: The negative (-) strand.
* `NO_STRAND`: Strand-independent data or data where the strand can not
be determined.
    """
    POS_STRAND = "POS_STRAND"
    NEG_STRAND = "NEG_STRAND"
    NO_STRAND = "NO_STRAND"


class Variant(ProtocolElement):
    """
A `Variant` represents a change in DNA sequence relative to some reference.
For example, a variant could represent a SNP or an insertion.
Variants belong to a `VariantSet`.
This is equivalent to a row in VCF.
    """
    _schemaSource = """
{"namespace": "org.ga4gh.models", "type": "record", "name": "Variant",
"fields": [{"doc": "", "type": "string", "name": "id"}, {"doc": "",
"type": "string", "name": "variantSetId"}, {"default": [], "doc": "",
"type": {"items": "string", "type": "array"}, "name": "names"},
{"default": null, "doc": "", "type": ["null", "long"], "name":
"created"}, {"default": null, "doc": "", "type": ["null", "long"],
"name": "updated"}, {"doc": "", "type": "string", "name":
"referenceName"}, {"doc": "", "type": "long", "name": "start"},
{"doc": "", "type": "long", "name": "end"}, {"doc": "", "type":
"string", "name": "referenceBases"}, {"default": [], "doc": "",
"type": {"items": "string", "type": "array"}, "name":
"alternateBases"}, {"default": {}, "doc": "", "type": {"values":
{"items": "string", "type": "array"}, "type": "map"}, "name": "info"},
{"default": [], "doc": "", "type": {"items": {"doc": "", "type":
"record", "name": "Call", "fields": [{"doc": "", "type": ["null",
"string"], "name": "callSetId"}, {"default": null, "doc": "", "type":
["null", "string"], "name": "callSetName"}, {"default": [], "doc": "",
"type": {"items": "int", "type": "array"}, "name": "genotype"},
{"default": null, "doc": "", "type": ["null", "string"], "name":
"phaseset"}, {"default": [], "doc": "", "type": {"items": "double",
"type": "array"}, "name": "genotypeLikelihood"}, {"default": {},
"doc": "", "type": {"values": {"items": "string", "type": "array"},
"type": "map"}, "name": "info"}]}, "type": "array"}, "name":
"calls"}], "doc": ""}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = set([
        "end",
        "id",
        "referenceBases",
        "referenceName",
        "start",
        "variantSetId",
    ])

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'calls': Call,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'calls': Call,
        }
        return embeddedTypes[fieldName]

    __slots__ = ['alternateBases', 'calls', 'created', 'end', 'id', 'info',
                 'names', 'referenceBases', 'referenceName',
                 'start', 'updated', 'variantSetId']

    def __init__(self):
        self.alternateBases = []
        self.calls = []
        self.created = None
        self.end = None
        self.id = None
        self.info = {}
        self.names = []
        self.referenceBases = None
        self.referenceName = None
        self.start = None
        self.updated = None
        self.variantSetId = None


class VariantSet(ProtocolElement):
    """
`Variant` and `CallSet` both belong to a `VariantSet`.
`VariantSet` belongs to a `Dataset`.
The variant set is equivalent to a VCF file.
    """
    _schemaSource = """
{"namespace": "org.ga4gh.models", "type": "record", "name":
"VariantSet", "fields": [{"doc": "", "type": "string", "name": "id"},
{"doc": "", "type": "string", "name": "datasetId"}, {"doc": "",
"type": "string", "name": "referenceSetId"}, {"default": [], "doc":
"", "type": {"items": {"doc": "", "type": "record", "name":
"VariantSetMetadata", "fields": [{"doc": "", "type": "string", "name":
"key"}, {"doc": "", "type": "string", "name": "value"}, {"doc": "",
"type": "string", "name": "id"}, {"doc": "", "type": "string", "name":
"type"}, {"doc": "", "type": "string", "name": "number"}, {"doc": "",
"type": "string", "name": "description"}, {"default": {}, "doc": "",
"type": {"values": {"items": "string", "type": "array"}, "type":
"map"}, "name": "info"}]}, "type": "array"}, "name": "metadata"}],
"doc": ""}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = set([
        "datasetId",
        "id",
        "referenceSetId",
    ])

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'metadata': VariantSetMetadata,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'metadata': VariantSetMetadata,
        }
        return embeddedTypes[fieldName]

    __slots__ = ['datasetId', 'id', 'metadata', 'referenceSetId']

    def __init__(self):
        self.datasetId = None
        self.id = None
        self.metadata = []
        self.referenceSetId = None


class VariantSetMetadata(ProtocolElement):
    """
This metadata represents VCF header information.
    """
    _schemaSource = """
{"namespace": "org.ga4gh.models", "type": "record", "name":
"VariantSetMetadata", "fields": [{"doc": "", "type": "string", "name":
"key"}, {"doc": "", "type": "string", "name": "value"}, {"doc": "",
"type": "string", "name": "id"}, {"doc": "", "type": "string", "name":
"type"}, {"doc": "", "type": "string", "name": "number"}, {"doc": "",
"type": "string", "name": "description"}, {"default": {}, "doc": "",
"type": {"values": {"items": "string", "type": "array"}, "type":
"map"}, "name": "info"}], "doc": ""}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = set([
        "description",
        "id",
        "key",
        "number",
        "type",
        "value",
    ])

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return embeddedTypes[fieldName]

    __slots__ = ['description', 'id', 'info', 'key', 'number', 'type', 'value']

    def __init__(self):
        self.description = None
        self.id = None
        self.info = {}
        self.key = None
        self.number = None
        self.type = None
        self.value = None


class ReadCounts(ProtocolElement):
    """
Details of the read counts.
    """
    _schemaSource = """
{"namespace": "org.ga4gh", "type": "record", "name": "ReadCounts",
"fields": [{"doc": "", "type": "string", "name": "analysisId"},
{"doc": "", "type": "int", "name": "totalReadCount"}, {"doc": "",
"type": "int", "name": "uniqueCount"}, {"doc": "", "type": "int",
"name": "multiCount"}, {"doc": "", "type": "int", "name":
"uniqueSpliceCount"}, {"doc": "", "type": "int", "name":
"multiSpliceCount"}], "doc": ""}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = set([
        "analysisId",
        "multiCount",
        "multiSpliceCount",
        "totalReadCount",
        "uniqueCount",
        "uniqueSpliceCount",
    ])

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return embeddedTypes[fieldName]

    __slots__ = ['analysisId', 'multiCount', 'multiSpliceCount',
                 'totalReadCount', 'uniqueCount',
                 'uniqueSpliceCount']

    def __init__(self):
        self.analysisId = None
        self.multiCount = None
        self.multiSpliceCount = None
        self.totalReadCount = None
        self.uniqueCount = None
        self.uniqueSpliceCount = None


class SearchExpressionLevelRequest(SearchRequest):
    """
This request maps to the body of 'POST /expressionlevel/search'
as JSON.
    """
    _schemaSource = """
{"namespace": "org.ga4gh", "type": "record", "name":
"SearchExpressionLevelRequest", "fields": [{"default": null, "doc":
"", "type": ["null", "string"], "name": "expressionLevelId"},
{"default": null, "doc": "", "type": ["null", "string"], "name":
"featureGroupId"}, {"default": null, "doc": "", "type": ["null",
"string"], "name": "rnaQuantificationId"}, {"default": null, "doc":
"", "type": ["null", "int"], "name": "pageSize"}, {"default": null,
"doc": "", "type": ["null", "string"], "name": "pageToken"}], "doc":
""}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = set([])

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return embeddedTypes[fieldName]

    __slots__ = ['expressionLevelId', 'featureGroupId', 'pageSize', 'pageToken',
                 'rnaQuantificationId']

    def __init__(self):
        self.expressionLevelId = None
        self.featureGroupId = None
        self.pageSize = None
        self.pageToken = None
        self.rnaQuantificationId = None


class SearchExpressionLevelResponse(SearchResponse):
    """
This is the response from 'POST /expressionlevel/search' expressed as JSON.
    """
    _schemaSource = """
{"namespace": "org.ga4gh", "type": "record", "name":
"SearchExpressionLevelResponse", "fields": [{"default": [], "doc": "",
"type": {"items": {"doc": "", "type": "record", "name":
"ExpressionLevel", "fields": [{"doc": "", "type": "string", "name":
"id"}, {"doc": "", "type": "string", "name": "featureGroupId"},
{"doc": "", "type": "string", "name": "annotationId"}, {"doc": "",
"type": "float", "name": "rawReadCount"}, {"default": null, "doc": "",
"type": ["null", "float"], "name": "expression"}, {"default": false,
"doc": "", "type": ["null", "boolean"], "name": "isNormalized"},
{"default": null, "doc": "", "type": ["null", {"symbols": ["FPKM",
"RPM"], "doc": "", "type": "enum", "name": "ExpressionUnits"}],
"name": "units"}, {"default": null, "doc": "", "type": ["null",
"float"], "name": "score"}]}, "type": "array"}, "name":
"expressionLevel"}, {"default": null, "doc": "", "type": ["null",
"string"], "name": "nextPageToken"}], "doc": ""}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = set([])
    _valueListName = "expressionLevel"

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'expressionLevel': ExpressionLevel,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'expressionLevel': ExpressionLevel,
        }
        return embeddedTypes[fieldName]

    __slots__ = ['expressionLevel', 'nextPageToken']

    def __init__(self):
        self.expressionLevel = []
        self.nextPageToken = None


class SearchRnaQuantificationRequest(SearchRequest):
    """
This request maps to the body of 'POST /rnaquantification/search'
as JSON.
    """
    _schemaSource = """
{"namespace": "org.ga4gh", "type": "record", "name":
"SearchRnaQuantificationRequest", "fields": [{"default": null,
"doc": "", "type": ["null", "string"], "name": "rnaQuantificationId"},
{"default": null, "doc": "", "type": ["null", "int"], "name":
"pageSize"}, {"default": null, "doc": "", "type": ["null", "string"],
"name": "pageToken"}], "doc": ""}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = set([])

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return embeddedTypes[fieldName]

    __slots__ = ['rnaQuantificationId', 'pageSize', 'pageToken']

    def __init__(self):
        self.rnaQuantificationId = None
        self.pageSize = None
        self.pageToken = None


class SearchRnaQuantificationResponse(SearchResponse):
    """
This is the response from 'POST /rnaquantification/search' expressed as JSON.
    """
    _schemaSource = """
{"namespace": "org.ga4gh", "type": "record", "name":
"SearchRnaQuantificationResponse", "fields": [{"default": [],
"doc": "", "type": {"items": {"doc": "", "type": "record", "name":
"RnaQuantification", "fields": [{"doc": "", "type": "string",
"name": "id"}, {"default": null, "doc": "", "type": ["null",
"string"], "name": "name"}, {"default": null, "doc": "", "type":
["null", "string"], "name": "description"}, {"doc": "", "type":
"string", "name": "readGroupId"}, {"default": [], "doc": "", "type":
{"items": "string", "type": "array"}, "name": "annotationIds"}]},
"type": "array"}, "name": "rnaQuantification"}, {"default": null,
"doc": "", "type": ["null", "string"], "name": "nextPageToken"}], "doc":
""}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = set([])
    _valueListName = "rnaQuantification"

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'rnaQuantification': RnaQuantification,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'rnaQuantification': RnaQuantification,
        }
        return embeddedTypes[fieldName]

    __slots__ = ['rnaQuantification', 'nextPageToken']

    def __init__(self):
        self.rnaQuantification = []
        self.nextPageToken = None

postMethods = \
    [('/analyses/search',
      SearchAnalysesRequest,
      SearchAnalysesResponse),
     ('/callsets/search',
      SearchCallSetsRequest,
      SearchCallSetsResponse),
     ('/experiments/search',
      SearchExperimentsRequest,
      SearchExperimentsResponse),
     ('/individualgroups/search',
      SearchIndividualGroupsRequest,
      SearchIndividualGroupsResponse),
     ('/individuals/search',
      SearchIndividualsRequest,
      SearchIndividualsResponse),
     ('/readgroupsets/search',
      SearchReadGroupSetsRequest,
      SearchReadGroupSetsResponse),
     ('/reads/search',
      SearchReadsRequest,
      SearchReadsResponse),
     ('/references/search',
      SearchReferencesRequest,
      SearchReferencesResponse),
     ('/referencesets/search',
      SearchReferenceSetsRequest,
      SearchReferenceSetsResponse),
     ('/samples/search',
      SearchSamplesRequest,
      SearchSamplesResponse),
     ('/variants/search',
      SearchVariantsRequest,
      SearchVariantsResponse),
     ('/variantsets/search',
      SearchVariantSetsRequest,
      SearchVariantSetsResponse),
      ('/expressionlevel/search',
      SearchExpressionLevelRequest,
      SearchExpressionLevelResponse),
     ('/rnaquantification/search',
      SearchRnaQuantificationRequest,
      SearchRnaQuantificationResponse)]
